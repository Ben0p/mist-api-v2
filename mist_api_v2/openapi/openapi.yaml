openapi: 3.0.3
info:
  contact:
    email: api@mist.io
    name: Mist API Team
  title: Mist API
  version: 2.0.0
servers:
- description: prod
  url: https://mist.io/
paths:
  /api/v2/clouds:
    get:
      description: List clouds owned by the active org. READ permission required on
        cloud.
      operationId: list_clouds
      parameters:
      - description: Only return results matching filter
        examples:
          Filter by cloud provider:
            value: provider:amazon
          Filter by title:
            value: LXD*
          Composite filter:
            value: provider:packet AND status:enabled
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: Order results by
        examples:
          Sort by title, descending:
            value: -title
        explode: true
        in: query
        name: sort
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCloudsResponse'
          description: List clouds response
        "401":
          description: Authentication failed
        "403":
          description: You are not authorized to perform this action
      security:
      - ApiKeyAuth:
        - read:cloud
      summary: List clouds
      tags:
      - clouds
      x-openapi-router-controller: mist_api_v2.controllers.clouds_controller
    post:
      description: Adds a new cloud and returns the cloud's id. ADD permission required
        on cloud.
      operationId: add_cloud
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddCloudRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
          description: Cloud added succesfully
        "401":
          description: Authentication failed
        "403":
          description: You are not authorized to perform this action
      security:
      - ApiKeyAuth:
        - add:cloud
      summary: Add cloud
      tags:
      - clouds
      x-openapi-router-controller: mist_api_v2.controllers.clouds_controller
  /api/v2/clouds/{cloud}:
    delete:
      description: Delete target cloud
      operationId: delete_cloud
      parameters:
      - explode: false
        in: path
        name: cloud
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Cloud deleted successfully
        "401":
          description: Authentication failed
        "403":
          description: You are not authorized to perform this action
        "404":
          description: Cloud not found
      security:
      - ApiKeyAuth:
        - delete:cloud
      summary: Delete cloud
      tags:
      - clouds
      x-openapi-router-controller: mist_api_v2.controllers.clouds_controller
    get:
      description: Get details about target cloud
      operationId: get_cloud
      parameters:
      - explode: false
        in: path
        name: cloud
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Cloud returned successfully
        "401":
          description: Authentication failed
        "403":
          description: You are not authorized to perform this action
        "404":
          description: Cloud not found
      security:
      - ApiKeyAuth:
        - read:cloud
      summary: Get cloud
      tags:
      - clouds
      x-openapi-router-controller: mist_api_v2.controllers.clouds_controller
components:
  callbacks: {}
  examples: {}
  headers: {}
  links: {}
  parameters: {}
  requestBodies: {}
  responses: {}
  schemas:
    AddCloudRequest:
      example:
        features:
          compute: true
          dns: false
        provider: amazon
        title: title
      properties:
        title:
          description: The name of the cloud to add
          type: string
        provider:
          description: The provider of the cloud
          enum:
          - amazon
          - digitalocean
          - google
          - openstack
          - packet
          - vsphere
          type: string
        credentials:
          $ref: '#/components/schemas/CloudCredentials'
        features:
          $ref: '#/components/schemas/CloudFeatures'
      required:
      - credentials
      - provider
      - title
      type: object
    AmazonCredentials:
      properties:
        apikey:
          description: Your AWS API key
          type: string
        apisecret:
          description: Your AWS API secret
          type: string
      required:
      - apikey
      - apisecret
      type: object
    Cloud:
      example:
        features:
          compute: true
          dns: false
        provider: amazon
        owned_by: owned_by
        id: id
        title: title
        config: '{}'
        created_by: created_by
        tags: '{}'
      properties:
        id:
          type: string
        title:
          type: string
        provider:
          enum:
          - amazon
          - google
          - digitalocean
          - openstack
          - packet
          - vsphere
          type: string
        config:
          type: object
        features:
          $ref: '#/components/schemas/CloudFeatures'
        tags:
          type: object
        created_by:
          type: string
        owned_by:
          type: string
      type: object
    CloudCredentials:
      discriminator:
        mapping:
          amazon: '#/components/schemas/AmazonCredentials'
          digitalocean: '#/components/schemas/DigitalOceanCredentials'
          google: '#/components/schemas/GoogleCredentials'
          openstack: '#/components/schemas/OpenStackCredentials'
          packet: '#/components/schemas/PacketCredentials'
          vsphere: '#/components/schemas/VSphereCredentials'
        propertyName: provider
      oneOf:
      - $ref: '#/components/schemas/AmazonCredentials'
      - $ref: '#/components/schemas/DigitalOceanCredentials'
      - $ref: '#/components/schemas/GoogleCredentials'
      - $ref: '#/components/schemas/OpenStackCredentials'
      - $ref: '#/components/schemas/PacketCredentials'
      - $ref: '#/components/schemas/VSphereCredentials'
      type: object
    CloudFeatures:
      description: The cloud features that should be enabled
      example:
        compute: true
        dns: false
      properties:
        compute:
          default: true
          description: Enable compute services
          type: boolean
        dns:
          default: false
          description: Enable DNS services
          type: boolean
      type: object
    DigitalOceanCredentials:
      properties:
        token:
          description: You DigitalOcean API token
          type: string
      required:
      - token
      type: object
    GoogleCredentials:
      properties:
        projectId:
          description: The Id of your GCP project
          type: string
        privateKey:
          description: Your GCP private key
          type: string
      required:
      - privateKey
      - projectId
      type: object
    ListCloudsResponse:
      example:
        data:
        - features:
            compute: true
            dns: false
          provider: amazon
          owned_by: owned_by
          id: id
          title: title
          config: '{}'
          created_by: created_by
          tags: '{}'
        - features:
            compute: true
            dns: false
          provider: amazon
          owned_by: owned_by
          id: id
          title: title
          config: '{}'
          created_by: created_by
          tags: '{}'
        meta:
          total_returned: 6
          total_matching: 0
          start: 1
          sort: sort
      properties:
        data:
          items:
            $ref: '#/components/schemas/Cloud'
          type: array
        meta:
          $ref: '#/components/schemas/ResponseMetadata'
      type: object
    OpenStackCredentials:
      properties:
        authUrl:
          type: string
        user:
          type: string
        password:
          type: string
        tenant:
          type: string
        domain:
          type: string
        region:
          type: string
        computeEndpoint:
          type: string
      required:
      - authUrl
      - password
      - user
      type: object
    PacketCredentials:
      properties:
        apikey:
          description: You Packet API key
          type: string
      required:
      - apikey
      type: object
    ResponseMetadata:
      example:
        total_returned: 6
        total_matching: 0
        start: 1
        sort: sort
      properties:
        total_matching:
          description: Total items matching the query
          type: integer
        total_returned:
          description: Number of items in response
          type: integer
        sort:
          description: Sort order of results
          type: string
        start:
          description: Index of first response item in total matching items
          type: integer
      type: object
    VSphereCredentials:
      properties:
        host:
          description: Your vSphere/vCenter host
          type: string
        username:
          description: Your username
          type: string
        password:
          description: Your password
          type: string
        ca_cert_file:
          description: CA certificate
          type: string
      required:
      - host
      - password
      - username
      type: object
    inline_response_200:
      example:
        id: id
      properties:
        id:
          type: string
      type: object
  securitySchemes:
    ApiKeyAuth:
      in: header
      name: Authorization
      type: apiKey
      x-apikeyInfoFunc: mist_api_v2.controllers.security_controller_.info_from_ApiKeyAuth
