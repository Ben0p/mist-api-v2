# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mist_api_v2.models.base_model_ import Model
from mist_api_v2 import util


class RackspaceCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, apikey=None, provider=None, region=None, username=None):  # noqa: E501
        """RackspaceCredentials - a model defined in OpenAPI

        :param apikey: The apikey of this RackspaceCredentials.  # noqa: E501
        :type apikey: str
        :param provider: The provider of this RackspaceCredentials.  # noqa: E501
        :type provider: str
        :param region: The region of this RackspaceCredentials.  # noqa: E501
        :type region: str
        :param username: The username of this RackspaceCredentials.  # noqa: E501
        :type username: str
        """
        self.openapi_types = {
            'apikey': str,
            'provider': str,
            'region': str,
            'username': str
        }

        self.attribute_map = {
            'apikey': 'apikey',
            'provider': 'provider',
            'region': 'region',
            'username': 'username'
        }

        self._apikey = apikey
        self._provider = provider
        self._region = region
        self._username = username

    @classmethod
    def from_dict(cls, dikt) -> 'RackspaceCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RackspaceCredentials of this RackspaceCredentials.  # noqa: E501
        :rtype: RackspaceCredentials
        """
        return util.deserialize_model(dikt, cls)

    @property
    def apikey(self):
        """Gets the apikey of this RackspaceCredentials.

        Your Rackspace Cloud API key  # noqa: E501

        :return: The apikey of this RackspaceCredentials.
        :rtype: str
        """
        return self._apikey

    @apikey.setter
    def apikey(self, apikey):
        """Sets the apikey of this RackspaceCredentials.

        Your Rackspace Cloud API key  # noqa: E501

        :param apikey: The apikey of this RackspaceCredentials.
        :type apikey: str
        """
        if apikey is None:
            raise ValueError("Invalid value for `apikey`, must not be `None`")  # noqa: E501

        self._apikey = apikey

    @property
    def provider(self):
        """Gets the provider of this RackspaceCredentials.


        :return: The provider of this RackspaceCredentials.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this RackspaceCredentials.


        :param provider: The provider of this RackspaceCredentials.
        :type provider: str
        """
        allowed_values = ["rackspace"]  # noqa: E501
        if provider not in allowed_values:
            raise ValueError(
                "Invalid value for `provider` ({0}), must be one of {1}"
                .format(provider, allowed_values)
            )

        self._provider = provider

    @property
    def region(self):
        """Gets the region of this RackspaceCredentials.

        Your Rackspace Cloud region  # noqa: E501

        :return: The region of this RackspaceCredentials.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this RackspaceCredentials.

        Your Rackspace Cloud region  # noqa: E501

        :param region: The region of this RackspaceCredentials.
        :type region: str
        """
        if region is None:
            raise ValueError("Invalid value for `region`, must not be `None`")  # noqa: E501

        self._region = region

    @property
    def username(self):
        """Gets the username of this RackspaceCredentials.

        Your Rackspace Cloud username  # noqa: E501

        :return: The username of this RackspaceCredentials.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this RackspaceCredentials.

        Your Rackspace Cloud username  # noqa: E501

        :param username: The username of this RackspaceCredentials.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username
