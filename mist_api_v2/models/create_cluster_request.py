# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mist_api_v2.models.base_model_ import Model
from mist_api_v2.models.create_cluster_request_all_of import CreateClusterRequestAllOf
from mist_api_v2 import util

from mist_api_v2.models.create_cluster_request_all_of import CreateClusterRequestAllOf  # noqa: E501

class CreateClusterRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, cloud=None, provider=None, role_arn=None, vpc_id=None, subnet_ids=None, security_group_ids=None, zone=None):  # noqa: E501
        """CreateClusterRequest - a model defined in OpenAPI

        :param name: The name of this CreateClusterRequest.  # noqa: E501
        :type name: str
        :param cloud: The cloud of this CreateClusterRequest.  # noqa: E501
        :type cloud: str
        :param provider: The provider of this CreateClusterRequest.  # noqa: E501
        :type provider: str
        :param role_arn: The role_arn of this CreateClusterRequest.  # noqa: E501
        :type role_arn: str
        :param vpc_id: The vpc_id of this CreateClusterRequest.  # noqa: E501
        :type vpc_id: str
        :param subnet_ids: The subnet_ids of this CreateClusterRequest.  # noqa: E501
        :type subnet_ids: List[str]
        :param security_group_ids: The security_group_ids of this CreateClusterRequest.  # noqa: E501
        :type security_group_ids: List[str]
        :param zone: The zone of this CreateClusterRequest.  # noqa: E501
        :type zone: str
        """
        self.openapi_types = {
            'name': str,
            'cloud': str,
            'provider': str,
            'role_arn': str,
            'vpc_id': str,
            'subnet_ids': List[str],
            'security_group_ids': List[str],
            'zone': str
        }

        self.attribute_map = {
            'name': 'name',
            'cloud': 'cloud',
            'provider': 'provider',
            'role_arn': 'role_arn',
            'vpc_id': 'vpc_id',
            'subnet_ids': 'subnet_ids',
            'security_group_ids': 'security_group_ids',
            'zone': 'zone'
        }

        self._name = name
        self._cloud = cloud
        self._provider = provider
        self._role_arn = role_arn
        self._vpc_id = vpc_id
        self._subnet_ids = subnet_ids
        self._security_group_ids = security_group_ids
        self._zone = zone

    @classmethod
    def from_dict(cls, dikt) -> 'CreateClusterRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CreateClusterRequest of this CreateClusterRequest.  # noqa: E501
        :rtype: CreateClusterRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CreateClusterRequest.

        The name of the cluster to create  # noqa: E501

        :return: The name of this CreateClusterRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateClusterRequest.

        The name of the cluster to create  # noqa: E501

        :param name: The name of this CreateClusterRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def cloud(self):
        """Gets the cloud of this CreateClusterRequest.

        The cloud the cluster belongs to  # noqa: E501

        :return: The cloud of this CreateClusterRequest.
        :rtype: str
        """
        return self._cloud

    @cloud.setter
    def cloud(self, cloud):
        """Sets the cloud of this CreateClusterRequest.

        The cloud the cluster belongs to  # noqa: E501

        :param cloud: The cloud of this CreateClusterRequest.
        :type cloud: str
        """
        if cloud is None:
            raise ValueError("Invalid value for `cloud`, must not be `None`")  # noqa: E501

        self._cloud = cloud

    @property
    def provider(self):
        """Gets the provider of this CreateClusterRequest.


        :return: The provider of this CreateClusterRequest.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this CreateClusterRequest.


        :param provider: The provider of this CreateClusterRequest.
        :type provider: str
        """
        allowed_values = ["google"]  # noqa: E501
        if provider not in allowed_values:
            raise ValueError(
                "Invalid value for `provider` ({0}), must be one of {1}"
                .format(provider, allowed_values)
            )

        self._provider = provider

    @property
    def role_arn(self):
        """Gets the role_arn of this CreateClusterRequest.

        The Amazon Resource Name (ARN) of the IAM role that provides permissions for the Kubernetes control plane to make calls to AWS API operations on your behalf  # noqa: E501

        :return: The role_arn of this CreateClusterRequest.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this CreateClusterRequest.

        The Amazon Resource Name (ARN) of the IAM role that provides permissions for the Kubernetes control plane to make calls to AWS API operations on your behalf  # noqa: E501

        :param role_arn: The role_arn of this CreateClusterRequest.
        :type role_arn: str
        """
        if role_arn is None:
            raise ValueError("Invalid value for `role_arn`, must not be `None`")  # noqa: E501

        self._role_arn = role_arn

    @property
    def vpc_id(self):
        """Gets the vpc_id of this CreateClusterRequest.

        The VPC associated with the cluster  # noqa: E501

        :return: The vpc_id of this CreateClusterRequest.
        :rtype: str
        """
        return self._vpc_id

    @vpc_id.setter
    def vpc_id(self, vpc_id):
        """Sets the vpc_id of this CreateClusterRequest.

        The VPC associated with the cluster  # noqa: E501

        :param vpc_id: The vpc_id of this CreateClusterRequest.
        :type vpc_id: str
        """
        if vpc_id is None:
            raise ValueError("Invalid value for `vpc_id`, must not be `None`")  # noqa: E501

        self._vpc_id = vpc_id

    @property
    def subnet_ids(self):
        """Gets the subnet_ids of this CreateClusterRequest.

        The subnets associated with the cluster  # noqa: E501

        :return: The subnet_ids of this CreateClusterRequest.
        :rtype: List[str]
        """
        return self._subnet_ids

    @subnet_ids.setter
    def subnet_ids(self, subnet_ids):
        """Sets the subnet_ids of this CreateClusterRequest.

        The subnets associated with the cluster  # noqa: E501

        :param subnet_ids: The subnet_ids of this CreateClusterRequest.
        :type subnet_ids: List[str]
        """
        if subnet_ids is None:
            raise ValueError("Invalid value for `subnet_ids`, must not be `None`")  # noqa: E501

        self._subnet_ids = subnet_ids

    @property
    def security_group_ids(self):
        """Gets the security_group_ids of this CreateClusterRequest.

        The security groups associated with the cross-account elastic network interfaces that are used to allow communication between your nodes and the Kubernetes control plane  # noqa: E501

        :return: The security_group_ids of this CreateClusterRequest.
        :rtype: List[str]
        """
        return self._security_group_ids

    @security_group_ids.setter
    def security_group_ids(self, security_group_ids):
        """Sets the security_group_ids of this CreateClusterRequest.

        The security groups associated with the cross-account elastic network interfaces that are used to allow communication between your nodes and the Kubernetes control plane  # noqa: E501

        :param security_group_ids: The security_group_ids of this CreateClusterRequest.
        :type security_group_ids: List[str]
        """
        if security_group_ids is None:
            raise ValueError("Invalid value for `security_group_ids`, must not be `None`")  # noqa: E501

        self._security_group_ids = security_group_ids

    @property
    def zone(self):
        """Gets the zone of this CreateClusterRequest.

        The name of the zone to create the cluster in  # noqa: E501

        :return: The zone of this CreateClusterRequest.
        :rtype: str
        """
        return self._zone

    @zone.setter
    def zone(self, zone):
        """Sets the zone of this CreateClusterRequest.

        The name of the zone to create the cluster in  # noqa: E501

        :param zone: The zone of this CreateClusterRequest.
        :type zone: str
        """
        if zone is None:
            raise ValueError("Invalid value for `zone`, must not be `None`")  # noqa: E501

        self._zone = zone
