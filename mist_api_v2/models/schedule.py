# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mist_api_v2.models.base_model_ import Model
from mist_api_v2.models.selector import Selector
from mist_api_v2 import util

from mist_api_v2.models.selector import Selector  # noqa: E501

class Schedule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, description=None, tags=None, enabled=None, action=None, script_id=None, params=None, selectors=None, schedule_type=None, schedule_entry=None, start_after=None, run_immediately=None, created_by=None, owned_by=None):  # noqa: E501
        """Schedule - a model defined in OpenAPI

        :param id: The id of this Schedule.  # noqa: E501
        :type id: str
        :param name: The name of this Schedule.  # noqa: E501
        :type name: str
        :param description: The description of this Schedule.  # noqa: E501
        :type description: str
        :param tags: The tags of this Schedule.  # noqa: E501
        :type tags: object
        :param enabled: The enabled of this Schedule.  # noqa: E501
        :type enabled: bool
        :param action: The action of this Schedule.  # noqa: E501
        :type action: str
        :param script_id: The script_id of this Schedule.  # noqa: E501
        :type script_id: str
        :param params: The params of this Schedule.  # noqa: E501
        :type params: str
        :param selectors: The selectors of this Schedule.  # noqa: E501
        :type selectors: List[Selector]
        :param schedule_type: The schedule_type of this Schedule.  # noqa: E501
        :type schedule_type: str
        :param schedule_entry: The schedule_entry of this Schedule.  # noqa: E501
        :type schedule_entry: str
        :param start_after: The start_after of this Schedule.  # noqa: E501
        :type start_after: str
        :param run_immediately: The run_immediately of this Schedule.  # noqa: E501
        :type run_immediately: bool
        :param created_by: The created_by of this Schedule.  # noqa: E501
        :type created_by: str
        :param owned_by: The owned_by of this Schedule.  # noqa: E501
        :type owned_by: str
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'description': str,
            'tags': object,
            'enabled': bool,
            'action': str,
            'script_id': str,
            'params': str,
            'selectors': List[Selector],
            'schedule_type': str,
            'schedule_entry': str,
            'start_after': str,
            'run_immediately': bool,
            'created_by': str,
            'owned_by': str
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'description': 'description',
            'tags': 'tags',
            'enabled': 'enabled',
            'action': 'action',
            'script_id': 'script_id',
            'params': 'params',
            'selectors': 'selectors',
            'schedule_type': 'schedule_type',
            'schedule_entry': 'schedule_entry',
            'start_after': 'start_after',
            'run_immediately': 'run_immediately',
            'created_by': 'created_by',
            'owned_by': 'owned_by'
        }

        self._id = id
        self._name = name
        self._description = description
        self._tags = tags
        self._enabled = enabled
        self._action = action
        self._script_id = script_id
        self._params = params
        self._selectors = selectors
        self._schedule_type = schedule_type
        self._schedule_entry = schedule_entry
        self._start_after = start_after
        self._run_immediately = run_immediately
        self._created_by = created_by
        self._owned_by = owned_by

    @classmethod
    def from_dict(cls, dikt) -> 'Schedule':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Schedule of this Schedule.  # noqa: E501
        :rtype: Schedule
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Schedule.

        The id of the schedule  # noqa: E501

        :return: The id of this Schedule.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Schedule.

        The id of the schedule  # noqa: E501

        :param id: The id of this Schedule.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Schedule.

        The name of the schedule  # noqa: E501

        :return: The name of this Schedule.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Schedule.

        The name of the schedule  # noqa: E501

        :param name: The name of this Schedule.
        :type name: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this Schedule.

        The description of the schedule  # noqa: E501

        :return: The description of this Schedule.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Schedule.

        The description of the schedule  # noqa: E501

        :param description: The description of this Schedule.
        :type description: str
        """

        self._description = description

    @property
    def tags(self):
        """Gets the tags of this Schedule.

        The tags related to the schedule  # noqa: E501

        :return: The tags of this Schedule.
        :rtype: object
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Schedule.

        The tags related to the schedule  # noqa: E501

        :param tags: The tags of this Schedule.
        :type tags: object
        """

        self._tags = tags

    @property
    def enabled(self):
        """Gets the enabled of this Schedule.

        Schedule status (enabled, disabled)  # noqa: E501

        :return: The enabled of this Schedule.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this Schedule.

        Schedule status (enabled, disabled)  # noqa: E501

        :param enabled: The enabled of this Schedule.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def action(self):
        """Gets the action of this Schedule.

        The action that a schedule performs on a resource  # noqa: E501

        :return: The action of this Schedule.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this Schedule.

        The action that a schedule performs on a resource  # noqa: E501

        :param action: The action of this Schedule.
        :type action: str
        """

        self._action = action

    @property
    def script_id(self):
        """Gets the script_id of this Schedule.

        The id of the script that schedule is about to run  # noqa: E501

        :return: The script_id of this Schedule.
        :rtype: str
        """
        return self._script_id

    @script_id.setter
    def script_id(self, script_id):
        """Sets the script_id of this Schedule.

        The id of the script that schedule is about to run  # noqa: E501

        :param script_id: The script_id of this Schedule.
        :type script_id: str
        """

        self._script_id = script_id

    @property
    def params(self):
        """Gets the params of this Schedule.

        Schedule parameters  # noqa: E501

        :return: The params of this Schedule.
        :rtype: str
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this Schedule.

        Schedule parameters  # noqa: E501

        :param params: The params of this Schedule.
        :type params: str
        """

        self._params = params

    @property
    def selectors(self):
        """Gets the selectors of this Schedule.


        :return: The selectors of this Schedule.
        :rtype: List[Selector]
        """
        return self._selectors

    @selectors.setter
    def selectors(self, selectors):
        """Sets the selectors of this Schedule.


        :param selectors: The selectors of this Schedule.
        :type selectors: List[Selector]
        """

        self._selectors = selectors

    @property
    def schedule_type(self):
        """Gets the schedule_type of this Schedule.

        The type of the schedule  # noqa: E501

        :return: The schedule_type of this Schedule.
        :rtype: str
        """
        return self._schedule_type

    @schedule_type.setter
    def schedule_type(self, schedule_type):
        """Sets the schedule_type of this Schedule.

        The type of the schedule  # noqa: E501

        :param schedule_type: The schedule_type of this Schedule.
        :type schedule_type: str
        """

        self._schedule_type = schedule_type

    @property
    def schedule_entry(self):
        """Gets the schedule_entry of this Schedule.

        In case of One Off schedule type the date string that schedule runs (The format should be ΥΥΥΥ-ΜΜ-DD HH:MM:SS). In case of Interval and Crontab schedule types a JSON string with need time unit values. For Interval schedule type interval integer value and period string value needed. For Crontab schedule type minute, hour, day_of_week, day_of_month and month_of_year string values needed.  # noqa: E501

        :return: The schedule_entry of this Schedule.
        :rtype: str
        """
        return self._schedule_entry

    @schedule_entry.setter
    def schedule_entry(self, schedule_entry):
        """Sets the schedule_entry of this Schedule.

        In case of One Off schedule type the date string that schedule runs (The format should be ΥΥΥΥ-ΜΜ-DD HH:MM:SS). In case of Interval and Crontab schedule types a JSON string with need time unit values. For Interval schedule type interval integer value and period string value needed. For Crontab schedule type minute, hour, day_of_week, day_of_month and month_of_year string values needed.  # noqa: E501

        :param schedule_entry: The schedule_entry of this Schedule.
        :type schedule_entry: str
        """

        self._schedule_entry = schedule_entry

    @property
    def start_after(self):
        """Gets the start_after of this Schedule.

        The date after that schedule starts. The format should be ΥΥΥΥ-ΜΜ-DD HH:MM:SS  # noqa: E501

        :return: The start_after of this Schedule.
        :rtype: str
        """
        return self._start_after

    @start_after.setter
    def start_after(self, start_after):
        """Sets the start_after of this Schedule.

        The date after that schedule starts. The format should be ΥΥΥΥ-ΜΜ-DD HH:MM:SS  # noqa: E501

        :param start_after: The start_after of this Schedule.
        :type start_after: str
        """

        self._start_after = start_after

    @property
    def run_immediately(self):
        """Gets the run_immediately of this Schedule.

        Decides if the schedule runs immediately of not  # noqa: E501

        :return: The run_immediately of this Schedule.
        :rtype: bool
        """
        return self._run_immediately

    @run_immediately.setter
    def run_immediately(self, run_immediately):
        """Sets the run_immediately of this Schedule.

        Decides if the schedule runs immediately of not  # noqa: E501

        :param run_immediately: The run_immediately of this Schedule.
        :type run_immediately: bool
        """

        self._run_immediately = run_immediately

    @property
    def created_by(self):
        """Gets the created_by of this Schedule.

        The name of user that created the schedule  # noqa: E501

        :return: The created_by of this Schedule.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Schedule.

        The name of user that created the schedule  # noqa: E501

        :param created_by: The created_by of this Schedule.
        :type created_by: str
        """

        self._created_by = created_by

    @property
    def owned_by(self):
        """Gets the owned_by of this Schedule.

        The name of user that owns the schedule  # noqa: E501

        :return: The owned_by of this Schedule.
        :rtype: str
        """
        return self._owned_by

    @owned_by.setter
    def owned_by(self, owned_by):
        """Sets the owned_by of this Schedule.

        The name of user that owns the schedule  # noqa: E501

        :param owned_by: The owned_by of this Schedule.
        :type owned_by: str
        """

        self._owned_by = owned_by
