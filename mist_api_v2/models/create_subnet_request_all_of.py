# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mist_api_v2.models.base_model_ import Model
from mist_api_v2.models.supported_subnet_providers import SupportedSubnetProviders
from mist_api_v2 import util

from mist_api_v2.models.supported_subnet_providers import SupportedSubnetProviders  # noqa: E501

class CreateSubnetRequestAllOf(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, cloud=None, tags=None, cidr=None, provider=None):  # noqa: E501
        """CreateSubnetRequestAllOf - a model defined in OpenAPI

        :param name: The name of this CreateSubnetRequestAllOf.  # noqa: E501
        :type name: str
        :param cloud: The cloud of this CreateSubnetRequestAllOf.  # noqa: E501
        :type cloud: str
        :param tags: The tags of this CreateSubnetRequestAllOf.  # noqa: E501
        :type tags: object
        :param cidr: The cidr of this CreateSubnetRequestAllOf.  # noqa: E501
        :type cidr: str
        :param provider: The provider of this CreateSubnetRequestAllOf.  # noqa: E501
        :type provider: SupportedSubnetProviders
        """
        self.openapi_types = {
            'name': str,
            'cloud': str,
            'tags': object,
            'cidr': str,
            'provider': SupportedSubnetProviders
        }

        self.attribute_map = {
            'name': 'name',
            'cloud': 'cloud',
            'tags': 'tags',
            'cidr': 'cidr',
            'provider': 'provider'
        }

        self._name = name
        self._cloud = cloud
        self._tags = tags
        self._cidr = cidr
        self._provider = provider

    @classmethod
    def from_dict(cls, dikt) -> 'CreateSubnetRequestAllOf':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CreateSubnetRequest_allOf of this CreateSubnetRequestAllOf.  # noqa: E501
        :rtype: CreateSubnetRequestAllOf
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CreateSubnetRequestAllOf.

        Specify subnet name  # noqa: E501

        :return: The name of this CreateSubnetRequestAllOf.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateSubnetRequestAllOf.

        Specify subnet name  # noqa: E501

        :param name: The name of this CreateSubnetRequestAllOf.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def cloud(self):
        """Gets the cloud of this CreateSubnetRequestAllOf.

        Specify cloud to provision on  # noqa: E501

        :return: The cloud of this CreateSubnetRequestAllOf.
        :rtype: str
        """
        return self._cloud

    @cloud.setter
    def cloud(self, cloud):
        """Sets the cloud of this CreateSubnetRequestAllOf.

        Specify cloud to provision on  # noqa: E501

        :param cloud: The cloud of this CreateSubnetRequestAllOf.
        :type cloud: str
        """
        if cloud is None:
            raise ValueError("Invalid value for `cloud`, must not be `None`")  # noqa: E501

        self._cloud = cloud

    @property
    def tags(self):
        """Gets the tags of this CreateSubnetRequestAllOf.

        Assign tags to provisioned network  # noqa: E501

        :return: The tags of this CreateSubnetRequestAllOf.
        :rtype: object
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateSubnetRequestAllOf.

        Assign tags to provisioned network  # noqa: E501

        :param tags: The tags of this CreateSubnetRequestAllOf.
        :type tags: object
        """

        self._tags = tags

    @property
    def cidr(self):
        """Gets the cidr of this CreateSubnetRequestAllOf.


        :return: The cidr of this CreateSubnetRequestAllOf.
        :rtype: str
        """
        return self._cidr

    @cidr.setter
    def cidr(self, cidr):
        """Sets the cidr of this CreateSubnetRequestAllOf.


        :param cidr: The cidr of this CreateSubnetRequestAllOf.
        :type cidr: str
        """
        if cidr is None:
            raise ValueError("Invalid value for `cidr`, must not be `None`")  # noqa: E501

        self._cidr = cidr

    @property
    def provider(self):
        """Gets the provider of this CreateSubnetRequestAllOf.


        :return: The provider of this CreateSubnetRequestAllOf.
        :rtype: SupportedSubnetProviders
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this CreateSubnetRequestAllOf.


        :param provider: The provider of this CreateSubnetRequestAllOf.
        :type provider: SupportedSubnetProviders
        """
        if provider is None:
            raise ValueError("Invalid value for `provider`, must not be `None`")  # noqa: E501

        self._provider = provider
