# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mist_api_v2.models.base_model_ import Model
from mist_api_v2 import util


class Org(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, clouds_count=None, teams_count=None, total_machine_count=None, created=None, enterprise_plan=None, selected_plan=None, default_monitoring_method=None, enable_r12ns=None, insights_enabled=None, ownership_enabled=None):  # noqa: E501
        """Org - a model defined in OpenAPI

        :param id: The id of this Org.  # noqa: E501
        :type id: str
        :param name: The name of this Org.  # noqa: E501
        :type name: str
        :param clouds_count: The clouds_count of this Org.  # noqa: E501
        :type clouds_count: str
        :param teams_count: The teams_count of this Org.  # noqa: E501
        :type teams_count: str
        :param total_machine_count: The total_machine_count of this Org.  # noqa: E501
        :type total_machine_count: str
        :param created: The created of this Org.  # noqa: E501
        :type created: bool
        :param enterprise_plan: The enterprise_plan of this Org.  # noqa: E501
        :type enterprise_plan: object
        :param selected_plan: The selected_plan of this Org.  # noqa: E501
        :type selected_plan: str
        :param default_monitoring_method: The default_monitoring_method of this Org.  # noqa: E501
        :type default_monitoring_method: str
        :param enable_r12ns: The enable_r12ns of this Org.  # noqa: E501
        :type enable_r12ns: bool
        :param insights_enabled: The insights_enabled of this Org.  # noqa: E501
        :type insights_enabled: bool
        :param ownership_enabled: The ownership_enabled of this Org.  # noqa: E501
        :type ownership_enabled: bool
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'clouds_count': str,
            'teams_count': str,
            'total_machine_count': str,
            'created': bool,
            'enterprise_plan': object,
            'selected_plan': str,
            'default_monitoring_method': str,
            'enable_r12ns': bool,
            'insights_enabled': bool,
            'ownership_enabled': bool
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'clouds_count': 'clouds_count',
            'teams_count': 'teams_count',
            'total_machine_count': 'total_machine_count',
            'created': 'created',
            'enterprise_plan': 'enterprise_plan',
            'selected_plan': 'selected_plan',
            'default_monitoring_method': 'default_monitoring_method',
            'enable_r12ns': 'enable_r12ns',
            'insights_enabled': 'insights_enabled',
            'ownership_enabled': 'ownership_enabled'
        }

        self._id = id
        self._name = name
        self._clouds_count = clouds_count
        self._teams_count = teams_count
        self._total_machine_count = total_machine_count
        self._created = created
        self._enterprise_plan = enterprise_plan
        self._selected_plan = selected_plan
        self._default_monitoring_method = default_monitoring_method
        self._enable_r12ns = enable_r12ns
        self._insights_enabled = insights_enabled
        self._ownership_enabled = ownership_enabled

    @classmethod
    def from_dict(cls, dikt) -> 'Org':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Org of this Org.  # noqa: E501
        :rtype: Org
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Org.


        :return: The id of this Org.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Org.


        :param id: The id of this Org.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Org.


        :return: The name of this Org.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Org.


        :param name: The name of this Org.
        :type name: str
        """

        self._name = name

    @property
    def clouds_count(self):
        """Gets the clouds_count of this Org.


        :return: The clouds_count of this Org.
        :rtype: str
        """
        return self._clouds_count

    @clouds_count.setter
    def clouds_count(self, clouds_count):
        """Sets the clouds_count of this Org.


        :param clouds_count: The clouds_count of this Org.
        :type clouds_count: str
        """

        self._clouds_count = clouds_count

    @property
    def teams_count(self):
        """Gets the teams_count of this Org.


        :return: The teams_count of this Org.
        :rtype: str
        """
        return self._teams_count

    @teams_count.setter
    def teams_count(self, teams_count):
        """Sets the teams_count of this Org.


        :param teams_count: The teams_count of this Org.
        :type teams_count: str
        """

        self._teams_count = teams_count

    @property
    def total_machine_count(self):
        """Gets the total_machine_count of this Org.


        :return: The total_machine_count of this Org.
        :rtype: str
        """
        return self._total_machine_count

    @total_machine_count.setter
    def total_machine_count(self, total_machine_count):
        """Sets the total_machine_count of this Org.


        :param total_machine_count: The total_machine_count of this Org.
        :type total_machine_count: str
        """

        self._total_machine_count = total_machine_count

    @property
    def created(self):
        """Gets the created of this Org.


        :return: The created of this Org.
        :rtype: bool
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Org.


        :param created: The created of this Org.
        :type created: bool
        """

        self._created = created

    @property
    def enterprise_plan(self):
        """Gets the enterprise_plan of this Org.


        :return: The enterprise_plan of this Org.
        :rtype: object
        """
        return self._enterprise_plan

    @enterprise_plan.setter
    def enterprise_plan(self, enterprise_plan):
        """Sets the enterprise_plan of this Org.


        :param enterprise_plan: The enterprise_plan of this Org.
        :type enterprise_plan: object
        """

        self._enterprise_plan = enterprise_plan

    @property
    def selected_plan(self):
        """Gets the selected_plan of this Org.


        :return: The selected_plan of this Org.
        :rtype: str
        """
        return self._selected_plan

    @selected_plan.setter
    def selected_plan(self, selected_plan):
        """Sets the selected_plan of this Org.


        :param selected_plan: The selected_plan of this Org.
        :type selected_plan: str
        """

        self._selected_plan = selected_plan

    @property
    def default_monitoring_method(self):
        """Gets the default_monitoring_method of this Org.


        :return: The default_monitoring_method of this Org.
        :rtype: str
        """
        return self._default_monitoring_method

    @default_monitoring_method.setter
    def default_monitoring_method(self, default_monitoring_method):
        """Sets the default_monitoring_method of this Org.


        :param default_monitoring_method: The default_monitoring_method of this Org.
        :type default_monitoring_method: str
        """

        self._default_monitoring_method = default_monitoring_method

    @property
    def enable_r12ns(self):
        """Gets the enable_r12ns of this Org.


        :return: The enable_r12ns of this Org.
        :rtype: bool
        """
        return self._enable_r12ns

    @enable_r12ns.setter
    def enable_r12ns(self, enable_r12ns):
        """Sets the enable_r12ns of this Org.


        :param enable_r12ns: The enable_r12ns of this Org.
        :type enable_r12ns: bool
        """

        self._enable_r12ns = enable_r12ns

    @property
    def insights_enabled(self):
        """Gets the insights_enabled of this Org.


        :return: The insights_enabled of this Org.
        :rtype: bool
        """
        return self._insights_enabled

    @insights_enabled.setter
    def insights_enabled(self, insights_enabled):
        """Sets the insights_enabled of this Org.


        :param insights_enabled: The insights_enabled of this Org.
        :type insights_enabled: bool
        """

        self._insights_enabled = insights_enabled

    @property
    def ownership_enabled(self):
        """Gets the ownership_enabled of this Org.


        :return: The ownership_enabled of this Org.
        :rtype: bool
        """
        return self._ownership_enabled

    @ownership_enabled.setter
    def ownership_enabled(self, ownership_enabled):
        """Sets the ownership_enabled of this Org.


        :param ownership_enabled: The ownership_enabled of this Org.
        :type ownership_enabled: bool
        """

        self._ownership_enabled = ownership_enabled
