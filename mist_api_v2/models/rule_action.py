# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mist_api_v2.models.base_model_ import Model
from mist_api_v2 import util


class RuleAction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type=None, users=None, teams=None, emails=None, action=None, command=None):  # noqa: E501
        """RuleAction - a model defined in OpenAPI

        :param type: The type of this RuleAction.  # noqa: E501
        :type type: str
        :param users: The users of this RuleAction.  # noqa: E501
        :type users: List[str]
        :param teams: The teams of this RuleAction.  # noqa: E501
        :type teams: List[str]
        :param emails: The emails of this RuleAction.  # noqa: E501
        :type emails: List[str]
        :param action: The action of this RuleAction.  # noqa: E501
        :type action: str
        :param command: The command of this RuleAction.  # noqa: E501
        :type command: str
        """
        self.openapi_types = {
            'type': str,
            'users': List[str],
            'teams': List[str],
            'emails': List[str],
            'action': str,
            'command': str
        }

        self.attribute_map = {
            'type': 'type',
            'users': 'users',
            'teams': 'teams',
            'emails': 'emails',
            'action': 'action',
            'command': 'command'
        }

        self._type = type
        self._users = users
        self._teams = teams
        self._emails = emails
        self._action = action
        self._command = command

    @classmethod
    def from_dict(cls, dikt) -> 'RuleAction':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RuleAction of this RuleAction.  # noqa: E501
        :rtype: RuleAction
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this RuleAction.

        the action's type: notification, machine_action, command   # noqa: E501

        :return: The type of this RuleAction.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RuleAction.

        the action's type: notification, machine_action, command   # noqa: E501

        :param type: The type of this RuleAction.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def users(self):
        """Gets the users of this RuleAction.

        a list of user to be notified, denoted by their UUIDs. Can be used by a notification action (optional)   # noqa: E501

        :return: The users of this RuleAction.
        :rtype: List[str]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this RuleAction.

        a list of user to be notified, denoted by their UUIDs. Can be used by a notification action (optional)   # noqa: E501

        :param users: The users of this RuleAction.
        :type users: List[str]
        """

        self._users = users

    @property
    def teams(self):
        """Gets the teams of this RuleAction.

        a list of teams, denoted by their UUIDs, whose users will be notified. Can be used by a notification action (optional)   # noqa: E501

        :return: The teams of this RuleAction.
        :rtype: List[str]
        """
        return self._teams

    @teams.setter
    def teams(self, teams):
        """Sets the teams of this RuleAction.

        a list of teams, denoted by their UUIDs, whose users will be notified. Can be used by a notification action (optional)   # noqa: E501

        :param teams: The teams of this RuleAction.
        :type teams: List[str]
        """

        self._teams = teams

    @property
    def emails(self):
        """Gets the emails of this RuleAction.

        a list of e-mails to send a notification to. Can be used by a notification action (optional)   # noqa: E501

        :return: The emails of this RuleAction.
        :rtype: List[str]
        """
        return self._emails

    @emails.setter
    def emails(self, emails):
        """Sets the emails of this RuleAction.

        a list of e-mails to send a notification to. Can be used by a notification action (optional)   # noqa: E501

        :param emails: The emails of this RuleAction.
        :type emails: List[str]
        """

        self._emails = emails

    @property
    def action(self):
        """Gets the action of this RuleAction.

        the action to be performed. Required by machine_action type   # noqa: E501

        :return: The action of this RuleAction.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this RuleAction.

        the action to be performed. Required by machine_action type   # noqa: E501

        :param action: The action of this RuleAction.
        :type action: str
        """

        self._action = action

    @property
    def command(self):
        """Gets the command of this RuleAction.

        the command to be executed. Required by the command type   # noqa: E501

        :return: The command of this RuleAction.
        :rtype: str
        """
        return self._command

    @command.setter
    def command(self, command):
        """Sets the command of this RuleAction.

        the command to be executed. Required by the command type   # noqa: E501

        :param command: The command of this RuleAction.
        :type command: str
        """

        self._command = command
