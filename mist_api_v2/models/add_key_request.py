# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mist_api_v2.models.base_model_ import Model
from mist_api_v2 import util


class AddKeyRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, generate=None, dry=None, private=None, certificate=None):  # noqa: E501
        """AddKeyRequest - a model defined in OpenAPI

        :param name: The name of this AddKeyRequest.  # noqa: E501
        :type name: str
        :param generate: The generate of this AddKeyRequest.  # noqa: E501
        :type generate: bool
        :param dry: The dry of this AddKeyRequest.  # noqa: E501
        :type dry: bool
        :param private: The private of this AddKeyRequest.  # noqa: E501
        :type private: str
        :param certificate: The certificate of this AddKeyRequest.  # noqa: E501
        :type certificate: str
        """
        self.openapi_types = {
            'name': str,
            'generate': bool,
            'dry': bool,
            'private': str,
            'certificate': str
        }

        self.attribute_map = {
            'name': 'name',
            'generate': 'generate',
            'dry': 'dry',
            'private': 'private',
            'certificate': 'certificate'
        }

        self._name = name
        self._generate = generate
        self._dry = dry
        self._private = private
        self._certificate = certificate

    @classmethod
    def from_dict(cls, dikt) -> 'AddKeyRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AddKeyRequest of this AddKeyRequest.  # noqa: E501
        :rtype: AddKeyRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this AddKeyRequest.

        The key's name  # noqa: E501

        :return: The name of this AddKeyRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AddKeyRequest.

        The key's name  # noqa: E501

        :param name: The name of this AddKeyRequest.
        :type name: str
        """

        self._name = name

    @property
    def generate(self):
        """Gets the generate of this AddKeyRequest.

        Generate a keypair instead of providing one  # noqa: E501

        :return: The generate of this AddKeyRequest.
        :rtype: bool
        """
        return self._generate

    @generate.setter
    def generate(self, generate):
        """Sets the generate of this AddKeyRequest.

        Generate a keypair instead of providing one  # noqa: E501

        :param generate: The generate of this AddKeyRequest.
        :type generate: bool
        """

        self._generate = generate

    @property
    def dry(self):
        """Gets the dry of this AddKeyRequest.


        :return: The dry of this AddKeyRequest.
        :rtype: bool
        """
        return self._dry

    @dry.setter
    def dry(self, dry):
        """Sets the dry of this AddKeyRequest.


        :param dry: The dry of this AddKeyRequest.
        :type dry: bool
        """

        self._dry = dry

    @property
    def private(self):
        """Gets the private of this AddKeyRequest.

        The private key  # noqa: E501

        :return: The private of this AddKeyRequest.
        :rtype: str
        """
        return self._private

    @private.setter
    def private(self, private):
        """Sets the private of this AddKeyRequest.

        The private key  # noqa: E501

        :param private: The private of this AddKeyRequest.
        :type private: str
        """

        self._private = private

    @property
    def certificate(self):
        """Gets the certificate of this AddKeyRequest.

        The signed public key, when using signed ssh keys  # noqa: E501

        :return: The certificate of this AddKeyRequest.
        :rtype: str
        """
        return self._certificate

    @certificate.setter
    def certificate(self, certificate):
        """Sets the certificate of this AddKeyRequest.

        The signed public key, when using signed ssh keys  # noqa: E501

        :param certificate: The certificate of this AddKeyRequest.
        :type certificate: str
        """

        self._certificate = certificate
