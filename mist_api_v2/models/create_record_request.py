# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mist_api_v2.models.base_model_ import Model
from mist_api_v2 import util


class CreateRecordRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, cloud=None, zone=None, data=None, type=None):  # noqa: E501
        """CreateRecordRequest - a model defined in OpenAPI

        :param name: The name of this CreateRecordRequest.  # noqa: E501
        :type name: str
        :param cloud: The cloud of this CreateRecordRequest.  # noqa: E501
        :type cloud: str
        :param zone: The zone of this CreateRecordRequest.  # noqa: E501
        :type zone: str
        :param data: The data of this CreateRecordRequest.  # noqa: E501
        :type data: str
        :param type: The type of this CreateRecordRequest.  # noqa: E501
        :type type: str
        """
        self.openapi_types = {
            'name': str,
            'cloud': str,
            'zone': str,
            'data': str,
            'type': str
        }

        self.attribute_map = {
            'name': 'name',
            'cloud': 'cloud',
            'zone': 'zone',
            'data': 'data',
            'type': 'type'
        }

        self._name = name
        self._cloud = cloud
        self._zone = zone
        self._data = data
        self._type = type

    @classmethod
    def from_dict(cls, dikt) -> 'CreateRecordRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CreateRecordRequest of this CreateRecordRequest.  # noqa: E501
        :rtype: CreateRecordRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CreateRecordRequest.


        :return: The name of this CreateRecordRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateRecordRequest.


        :param name: The name of this CreateRecordRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def cloud(self):
        """Gets the cloud of this CreateRecordRequest.


        :return: The cloud of this CreateRecordRequest.
        :rtype: str
        """
        return self._cloud

    @cloud.setter
    def cloud(self, cloud):
        """Sets the cloud of this CreateRecordRequest.


        :param cloud: The cloud of this CreateRecordRequest.
        :type cloud: str
        """
        if cloud is None:
            raise ValueError("Invalid value for `cloud`, must not be `None`")  # noqa: E501

        self._cloud = cloud

    @property
    def zone(self):
        """Gets the zone of this CreateRecordRequest.


        :return: The zone of this CreateRecordRequest.
        :rtype: str
        """
        return self._zone

    @zone.setter
    def zone(self, zone):
        """Sets the zone of this CreateRecordRequest.


        :param zone: The zone of this CreateRecordRequest.
        :type zone: str
        """
        if zone is None:
            raise ValueError("Invalid value for `zone`, must not be `None`")  # noqa: E501

        self._zone = zone

    @property
    def data(self):
        """Gets the data of this CreateRecordRequest.


        :return: The data of this CreateRecordRequest.
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this CreateRecordRequest.


        :param data: The data of this CreateRecordRequest.
        :type data: str
        """

        self._data = data

    @property
    def type(self):
        """Gets the type of this CreateRecordRequest.


        :return: The type of this CreateRecordRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateRecordRequest.


        :param type: The type of this CreateRecordRequest.
        :type type: str
        """
        allowed_values = ["A", "AAAA", "CNAME"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
