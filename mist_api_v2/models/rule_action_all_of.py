# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mist_api_v2.models.base_model_ import Model
from mist_api_v2.models.enum import Enum
from mist_api_v2 import util

from mist_api_v2.models.enum import Enum  # noqa: E501

class RuleActionAllOf(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type=None):  # noqa: E501
        """RuleActionAllOf - a model defined in OpenAPI

        :param type: The type of this RuleActionAllOf.  # noqa: E501
        :type type: Enum
        """
        self.openapi_types = {
            'type': Enum
        }

        self.attribute_map = {
            'type': 'type'
        }

        self._type = type

    @classmethod
    def from_dict(cls, dikt) -> 'RuleActionAllOf':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RuleAction_allOf of this RuleActionAllOf.  # noqa: E501
        :rtype: RuleActionAllOf
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this RuleActionAllOf.

        the action's type: notification, machine_action, command   # noqa: E501

        :return: The type of this RuleActionAllOf.
        :rtype: Enum
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RuleActionAllOf.

        the action's type: notification, machine_action, command   # noqa: E501

        :param type: The type of this RuleActionAllOf.
        :type type: Enum
        """
        allowed_values = [notification, machine_action, command]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
