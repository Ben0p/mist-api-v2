# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mist_api_v2.models.base_model_ import Model
from mist_api_v2.models.frequency import Frequency
from mist_api_v2.models.query import Query
from mist_api_v2.models.rule_action import RuleAction
from mist_api_v2.models.selector import Selector
from mist_api_v2.models.trigger_after import TriggerAfter
from mist_api_v2.models.window import Window
from mist_api_v2 import util

from mist_api_v2.models.frequency import Frequency  # noqa: E501
from mist_api_v2.models.query import Query  # noqa: E501
from mist_api_v2.models.rule_action import RuleAction  # noqa: E501
from mist_api_v2.models.selector import Selector  # noqa: E501
from mist_api_v2.models.trigger_after import TriggerAfter  # noqa: E501
from mist_api_v2.models.window import Window  # noqa: E501

class EditRuleRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, queries=None, window=None, frequency=None, trigger_after=None, actions=None, selectors=None):  # noqa: E501
        """EditRuleRequest - a model defined in OpenAPI

        :param queries: The queries of this EditRuleRequest.  # noqa: E501
        :type queries: List[Query]
        :param window: The window of this EditRuleRequest.  # noqa: E501
        :type window: Window
        :param frequency: The frequency of this EditRuleRequest.  # noqa: E501
        :type frequency: Frequency
        :param trigger_after: The trigger_after of this EditRuleRequest.  # noqa: E501
        :type trigger_after: TriggerAfter
        :param actions: The actions of this EditRuleRequest.  # noqa: E501
        :type actions: List[RuleAction]
        :param selectors: The selectors of this EditRuleRequest.  # noqa: E501
        :type selectors: Selector
        """
        self.openapi_types = {
            'queries': List[Query],
            'window': Window,
            'frequency': Frequency,
            'trigger_after': TriggerAfter,
            'actions': List[RuleAction],
            'selectors': Selector
        }

        self.attribute_map = {
            'queries': 'queries',
            'window': 'window',
            'frequency': 'frequency',
            'trigger_after': 'trigger_after',
            'actions': 'actions',
            'selectors': 'selectors'
        }

        self._queries = queries
        self._window = window
        self._frequency = frequency
        self._trigger_after = trigger_after
        self._actions = actions
        self._selectors = selectors

    @classmethod
    def from_dict(cls, dikt) -> 'EditRuleRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The EditRuleRequest of this EditRuleRequest.  # noqa: E501
        :rtype: EditRuleRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def queries(self):
        """Gets the queries of this EditRuleRequest.


        :return: The queries of this EditRuleRequest.
        :rtype: List[Query]
        """
        return self._queries

    @queries.setter
    def queries(self, queries):
        """Sets the queries of this EditRuleRequest.


        :param queries: The queries of this EditRuleRequest.
        :type queries: List[Query]
        """

        self._queries = queries

    @property
    def window(self):
        """Gets the window of this EditRuleRequest.


        :return: The window of this EditRuleRequest.
        :rtype: Window
        """
        return self._window

    @window.setter
    def window(self, window):
        """Sets the window of this EditRuleRequest.


        :param window: The window of this EditRuleRequest.
        :type window: Window
        """

        self._window = window

    @property
    def frequency(self):
        """Gets the frequency of this EditRuleRequest.


        :return: The frequency of this EditRuleRequest.
        :rtype: Frequency
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this EditRuleRequest.


        :param frequency: The frequency of this EditRuleRequest.
        :type frequency: Frequency
        """

        self._frequency = frequency

    @property
    def trigger_after(self):
        """Gets the trigger_after of this EditRuleRequest.


        :return: The trigger_after of this EditRuleRequest.
        :rtype: TriggerAfter
        """
        return self._trigger_after

    @trigger_after.setter
    def trigger_after(self, trigger_after):
        """Sets the trigger_after of this EditRuleRequest.


        :param trigger_after: The trigger_after of this EditRuleRequest.
        :type trigger_after: TriggerAfter
        """

        self._trigger_after = trigger_after

    @property
    def actions(self):
        """Gets the actions of this EditRuleRequest.


        :return: The actions of this EditRuleRequest.
        :rtype: List[RuleAction]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this EditRuleRequest.


        :param actions: The actions of this EditRuleRequest.
        :type actions: List[RuleAction]
        """

        self._actions = actions

    @property
    def selectors(self):
        """Gets the selectors of this EditRuleRequest.


        :return: The selectors of this EditRuleRequest.
        :rtype: Selector
        """
        return self._selectors

    @selectors.setter
    def selectors(self, selectors):
        """Sets the selectors of this EditRuleRequest.


        :param selectors: The selectors of this EditRuleRequest.
        :type selectors: Selector
        """

        self._selectors = selectors
