# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mist_api_v2.models.base_model_ import Model
from mist_api_v2 import util


class OrgResourcesCount(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, clouds_count=None, clusters_count=None, machines_count=None, volumes_count=None, buckets_count=None, networks_count=None, zones_count=None, keys_count=None, images_count=None, templates_count=None, tunnels_count=None, schedules_count=None, rules_count=None, teams_count=None):  # noqa: E501
        """OrgResourcesCount - a model defined in OpenAPI

        :param clouds_count: The clouds_count of this OrgResourcesCount.  # noqa: E501
        :type clouds_count: int
        :param clusters_count: The clusters_count of this OrgResourcesCount.  # noqa: E501
        :type clusters_count: int
        :param machines_count: The machines_count of this OrgResourcesCount.  # noqa: E501
        :type machines_count: int
        :param volumes_count: The volumes_count of this OrgResourcesCount.  # noqa: E501
        :type volumes_count: int
        :param buckets_count: The buckets_count of this OrgResourcesCount.  # noqa: E501
        :type buckets_count: int
        :param networks_count: The networks_count of this OrgResourcesCount.  # noqa: E501
        :type networks_count: int
        :param zones_count: The zones_count of this OrgResourcesCount.  # noqa: E501
        :type zones_count: int
        :param keys_count: The keys_count of this OrgResourcesCount.  # noqa: E501
        :type keys_count: int
        :param images_count: The images_count of this OrgResourcesCount.  # noqa: E501
        :type images_count: int
        :param templates_count: The templates_count of this OrgResourcesCount.  # noqa: E501
        :type templates_count: int
        :param tunnels_count: The tunnels_count of this OrgResourcesCount.  # noqa: E501
        :type tunnels_count: int
        :param schedules_count: The schedules_count of this OrgResourcesCount.  # noqa: E501
        :type schedules_count: int
        :param rules_count: The rules_count of this OrgResourcesCount.  # noqa: E501
        :type rules_count: int
        :param teams_count: The teams_count of this OrgResourcesCount.  # noqa: E501
        :type teams_count: int
        """
        self.openapi_types = {
            'clouds_count': int,
            'clusters_count': int,
            'machines_count': int,
            'volumes_count': int,
            'buckets_count': int,
            'networks_count': int,
            'zones_count': int,
            'keys_count': int,
            'images_count': int,
            'templates_count': int,
            'tunnels_count': int,
            'schedules_count': int,
            'rules_count': int,
            'teams_count': int
        }

        self.attribute_map = {
            'clouds_count': 'clouds_count',
            'clusters_count': 'clusters_count',
            'machines_count': 'machines_count',
            'volumes_count': 'volumes_count',
            'buckets_count': 'buckets_count',
            'networks_count': 'networks_count',
            'zones_count': 'zones_count',
            'keys_count': 'keys_count',
            'images_count': 'images_count',
            'templates_count': 'templates_count',
            'tunnels_count': 'tunnels_count',
            'schedules_count': 'schedules_count',
            'rules_count': 'rules_count',
            'teams_count': 'teams_count'
        }

        self._clouds_count = clouds_count
        self._clusters_count = clusters_count
        self._machines_count = machines_count
        self._volumes_count = volumes_count
        self._buckets_count = buckets_count
        self._networks_count = networks_count
        self._zones_count = zones_count
        self._keys_count = keys_count
        self._images_count = images_count
        self._templates_count = templates_count
        self._tunnels_count = tunnels_count
        self._schedules_count = schedules_count
        self._rules_count = rules_count
        self._teams_count = teams_count

    @classmethod
    def from_dict(cls, dikt) -> 'OrgResourcesCount':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The OrgResourcesCount of this OrgResourcesCount.  # noqa: E501
        :rtype: OrgResourcesCount
        """
        return util.deserialize_model(dikt, cls)

    @property
    def clouds_count(self):
        """Gets the clouds_count of this OrgResourcesCount.


        :return: The clouds_count of this OrgResourcesCount.
        :rtype: int
        """
        return self._clouds_count

    @clouds_count.setter
    def clouds_count(self, clouds_count):
        """Sets the clouds_count of this OrgResourcesCount.


        :param clouds_count: The clouds_count of this OrgResourcesCount.
        :type clouds_count: int
        """

        self._clouds_count = clouds_count

    @property
    def clusters_count(self):
        """Gets the clusters_count of this OrgResourcesCount.


        :return: The clusters_count of this OrgResourcesCount.
        :rtype: int
        """
        return self._clusters_count

    @clusters_count.setter
    def clusters_count(self, clusters_count):
        """Sets the clusters_count of this OrgResourcesCount.


        :param clusters_count: The clusters_count of this OrgResourcesCount.
        :type clusters_count: int
        """

        self._clusters_count = clusters_count

    @property
    def machines_count(self):
        """Gets the machines_count of this OrgResourcesCount.


        :return: The machines_count of this OrgResourcesCount.
        :rtype: int
        """
        return self._machines_count

    @machines_count.setter
    def machines_count(self, machines_count):
        """Sets the machines_count of this OrgResourcesCount.


        :param machines_count: The machines_count of this OrgResourcesCount.
        :type machines_count: int
        """

        self._machines_count = machines_count

    @property
    def volumes_count(self):
        """Gets the volumes_count of this OrgResourcesCount.


        :return: The volumes_count of this OrgResourcesCount.
        :rtype: int
        """
        return self._volumes_count

    @volumes_count.setter
    def volumes_count(self, volumes_count):
        """Sets the volumes_count of this OrgResourcesCount.


        :param volumes_count: The volumes_count of this OrgResourcesCount.
        :type volumes_count: int
        """

        self._volumes_count = volumes_count

    @property
    def buckets_count(self):
        """Gets the buckets_count of this OrgResourcesCount.


        :return: The buckets_count of this OrgResourcesCount.
        :rtype: int
        """
        return self._buckets_count

    @buckets_count.setter
    def buckets_count(self, buckets_count):
        """Sets the buckets_count of this OrgResourcesCount.


        :param buckets_count: The buckets_count of this OrgResourcesCount.
        :type buckets_count: int
        """

        self._buckets_count = buckets_count

    @property
    def networks_count(self):
        """Gets the networks_count of this OrgResourcesCount.


        :return: The networks_count of this OrgResourcesCount.
        :rtype: int
        """
        return self._networks_count

    @networks_count.setter
    def networks_count(self, networks_count):
        """Sets the networks_count of this OrgResourcesCount.


        :param networks_count: The networks_count of this OrgResourcesCount.
        :type networks_count: int
        """

        self._networks_count = networks_count

    @property
    def zones_count(self):
        """Gets the zones_count of this OrgResourcesCount.


        :return: The zones_count of this OrgResourcesCount.
        :rtype: int
        """
        return self._zones_count

    @zones_count.setter
    def zones_count(self, zones_count):
        """Sets the zones_count of this OrgResourcesCount.


        :param zones_count: The zones_count of this OrgResourcesCount.
        :type zones_count: int
        """

        self._zones_count = zones_count

    @property
    def keys_count(self):
        """Gets the keys_count of this OrgResourcesCount.


        :return: The keys_count of this OrgResourcesCount.
        :rtype: int
        """
        return self._keys_count

    @keys_count.setter
    def keys_count(self, keys_count):
        """Sets the keys_count of this OrgResourcesCount.


        :param keys_count: The keys_count of this OrgResourcesCount.
        :type keys_count: int
        """

        self._keys_count = keys_count

    @property
    def images_count(self):
        """Gets the images_count of this OrgResourcesCount.


        :return: The images_count of this OrgResourcesCount.
        :rtype: int
        """
        return self._images_count

    @images_count.setter
    def images_count(self, images_count):
        """Sets the images_count of this OrgResourcesCount.


        :param images_count: The images_count of this OrgResourcesCount.
        :type images_count: int
        """

        self._images_count = images_count

    @property
    def templates_count(self):
        """Gets the templates_count of this OrgResourcesCount.


        :return: The templates_count of this OrgResourcesCount.
        :rtype: int
        """
        return self._templates_count

    @templates_count.setter
    def templates_count(self, templates_count):
        """Sets the templates_count of this OrgResourcesCount.


        :param templates_count: The templates_count of this OrgResourcesCount.
        :type templates_count: int
        """

        self._templates_count = templates_count

    @property
    def tunnels_count(self):
        """Gets the tunnels_count of this OrgResourcesCount.


        :return: The tunnels_count of this OrgResourcesCount.
        :rtype: int
        """
        return self._tunnels_count

    @tunnels_count.setter
    def tunnels_count(self, tunnels_count):
        """Sets the tunnels_count of this OrgResourcesCount.


        :param tunnels_count: The tunnels_count of this OrgResourcesCount.
        :type tunnels_count: int
        """

        self._tunnels_count = tunnels_count

    @property
    def schedules_count(self):
        """Gets the schedules_count of this OrgResourcesCount.


        :return: The schedules_count of this OrgResourcesCount.
        :rtype: int
        """
        return self._schedules_count

    @schedules_count.setter
    def schedules_count(self, schedules_count):
        """Sets the schedules_count of this OrgResourcesCount.


        :param schedules_count: The schedules_count of this OrgResourcesCount.
        :type schedules_count: int
        """

        self._schedules_count = schedules_count

    @property
    def rules_count(self):
        """Gets the rules_count of this OrgResourcesCount.


        :return: The rules_count of this OrgResourcesCount.
        :rtype: int
        """
        return self._rules_count

    @rules_count.setter
    def rules_count(self, rules_count):
        """Sets the rules_count of this OrgResourcesCount.


        :param rules_count: The rules_count of this OrgResourcesCount.
        :type rules_count: int
        """

        self._rules_count = rules_count

    @property
    def teams_count(self):
        """Gets the teams_count of this OrgResourcesCount.


        :return: The teams_count of this OrgResourcesCount.
        :rtype: int
        """
        return self._teams_count

    @teams_count.setter
    def teams_count(self, teams_count):
        """Sets the teams_count of this OrgResourcesCount.


        :param teams_count: The teams_count of this OrgResourcesCount.
        :type teams_count: int
        """

        self._teams_count = teams_count
