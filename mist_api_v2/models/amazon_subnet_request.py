# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mist_api_v2.models.base_model_ import Model
from mist_api_v2 import util


class AmazonSubnetRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, provider=None, availability_zone=None):  # noqa: E501
        """AmazonSubnetRequest - a model defined in OpenAPI

        :param provider: The provider of this AmazonSubnetRequest.  # noqa: E501
        :type provider: str
        :param availability_zone: The availability_zone of this AmazonSubnetRequest.  # noqa: E501
        :type availability_zone: str
        """
        self.openapi_types = {
            'provider': str,
            'availability_zone': str
        }

        self.attribute_map = {
            'provider': 'provider',
            'availability_zone': 'availability_zone'
        }

        self._provider = provider
        self._availability_zone = availability_zone

    @classmethod
    def from_dict(cls, dikt) -> 'AmazonSubnetRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AmazonSubnetRequest of this AmazonSubnetRequest.  # noqa: E501
        :rtype: AmazonSubnetRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def provider(self):
        """Gets the provider of this AmazonSubnetRequest.


        :return: The provider of this AmazonSubnetRequest.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this AmazonSubnetRequest.


        :param provider: The provider of this AmazonSubnetRequest.
        :type provider: str
        """
        allowed_values = ["amazon"]  # noqa: E501
        if provider not in allowed_values:
            raise ValueError(
                "Invalid value for `provider` ({0}), must be one of {1}"
                .format(provider, allowed_values)
            )

        self._provider = provider

    @property
    def availability_zone(self):
        """Gets the availability_zone of this AmazonSubnetRequest.


        :return: The availability_zone of this AmazonSubnetRequest.
        :rtype: str
        """
        return self._availability_zone

    @availability_zone.setter
    def availability_zone(self, availability_zone):
        """Sets the availability_zone of this AmazonSubnetRequest.


        :param availability_zone: The availability_zone of this AmazonSubnetRequest.
        :type availability_zone: str
        """
        if availability_zone is None:
            raise ValueError("Invalid value for `availability_zone`, must not be `None`")  # noqa: E501

        self._availability_zone = availability_zone
