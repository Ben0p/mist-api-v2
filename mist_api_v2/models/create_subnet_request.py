# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mist_api_v2.models.base_model_ import Model
from mist_api_v2.models.create_subnet_request_all_of import CreateSubnetRequestAllOf
from mist_api_v2 import util

from mist_api_v2.models.create_subnet_request_all_of import CreateSubnetRequestAllOf  # noqa: E501

class CreateSubnetRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, cloud=None, tags=None, cidr=None, provider=None, availability_zone=None, region=None, gateway_ip=None, ip_version=None, enable_dhcp=None, allocation_pools=None):  # noqa: E501
        """CreateSubnetRequest - a model defined in OpenAPI

        :param name: The name of this CreateSubnetRequest.  # noqa: E501
        :type name: str
        :param cloud: The cloud of this CreateSubnetRequest.  # noqa: E501
        :type cloud: str
        :param tags: The tags of this CreateSubnetRequest.  # noqa: E501
        :type tags: object
        :param cidr: The cidr of this CreateSubnetRequest.  # noqa: E501
        :type cidr: str
        :param provider: The provider of this CreateSubnetRequest.  # noqa: E501
        :type provider: str
        :param availability_zone: The availability_zone of this CreateSubnetRequest.  # noqa: E501
        :type availability_zone: str
        :param region: The region of this CreateSubnetRequest.  # noqa: E501
        :type region: str
        :param gateway_ip: The gateway_ip of this CreateSubnetRequest.  # noqa: E501
        :type gateway_ip: str
        :param ip_version: The ip_version of this CreateSubnetRequest.  # noqa: E501
        :type ip_version: str
        :param enable_dhcp: The enable_dhcp of this CreateSubnetRequest.  # noqa: E501
        :type enable_dhcp: bool
        :param allocation_pools: The allocation_pools of this CreateSubnetRequest.  # noqa: E501
        :type allocation_pools: object
        """
        self.openapi_types = {
            'name': str,
            'cloud': str,
            'tags': object,
            'cidr': str,
            'provider': str,
            'availability_zone': str,
            'region': str,
            'gateway_ip': str,
            'ip_version': str,
            'enable_dhcp': bool,
            'allocation_pools': object
        }

        self.attribute_map = {
            'name': 'name',
            'cloud': 'cloud',
            'tags': 'tags',
            'cidr': 'cidr',
            'provider': 'provider',
            'availability_zone': 'availability_zone',
            'region': 'region',
            'gateway_ip': 'gateway_ip',
            'ip_version': 'ip_version',
            'enable_dhcp': 'enable_dhcp',
            'allocation_pools': 'allocation_pools'
        }

        self._name = name
        self._cloud = cloud
        self._tags = tags
        self._cidr = cidr
        self._provider = provider
        self._availability_zone = availability_zone
        self._region = region
        self._gateway_ip = gateway_ip
        self._ip_version = ip_version
        self._enable_dhcp = enable_dhcp
        self._allocation_pools = allocation_pools

    @classmethod
    def from_dict(cls, dikt) -> 'CreateSubnetRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CreateSubnetRequest of this CreateSubnetRequest.  # noqa: E501
        :rtype: CreateSubnetRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CreateSubnetRequest.

        Specify subnet name  # noqa: E501

        :return: The name of this CreateSubnetRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateSubnetRequest.

        Specify subnet name  # noqa: E501

        :param name: The name of this CreateSubnetRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def cloud(self):
        """Gets the cloud of this CreateSubnetRequest.

        Specify cloud to provision on  # noqa: E501

        :return: The cloud of this CreateSubnetRequest.
        :rtype: str
        """
        return self._cloud

    @cloud.setter
    def cloud(self, cloud):
        """Sets the cloud of this CreateSubnetRequest.

        Specify cloud to provision on  # noqa: E501

        :param cloud: The cloud of this CreateSubnetRequest.
        :type cloud: str
        """
        if cloud is None:
            raise ValueError("Invalid value for `cloud`, must not be `None`")  # noqa: E501

        self._cloud = cloud

    @property
    def tags(self):
        """Gets the tags of this CreateSubnetRequest.

        Assign tags to provisioned network  # noqa: E501

        :return: The tags of this CreateSubnetRequest.
        :rtype: object
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateSubnetRequest.

        Assign tags to provisioned network  # noqa: E501

        :param tags: The tags of this CreateSubnetRequest.
        :type tags: object
        """

        self._tags = tags

    @property
    def cidr(self):
        """Gets the cidr of this CreateSubnetRequest.


        :return: The cidr of this CreateSubnetRequest.
        :rtype: str
        """
        return self._cidr

    @cidr.setter
    def cidr(self, cidr):
        """Sets the cidr of this CreateSubnetRequest.


        :param cidr: The cidr of this CreateSubnetRequest.
        :type cidr: str
        """
        if cidr is None:
            raise ValueError("Invalid value for `cidr`, must not be `None`")  # noqa: E501

        self._cidr = cidr

    @property
    def provider(self):
        """Gets the provider of this CreateSubnetRequest.


        :return: The provider of this CreateSubnetRequest.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this CreateSubnetRequest.


        :param provider: The provider of this CreateSubnetRequest.
        :type provider: str
        """
        allowed_values = ["vexxhost"]  # noqa: E501
        if provider not in allowed_values:
            raise ValueError(
                "Invalid value for `provider` ({0}), must be one of {1}"
                .format(provider, allowed_values)
            )

        self._provider = provider

    @property
    def availability_zone(self):
        """Gets the availability_zone of this CreateSubnetRequest.


        :return: The availability_zone of this CreateSubnetRequest.
        :rtype: str
        """
        return self._availability_zone

    @availability_zone.setter
    def availability_zone(self, availability_zone):
        """Sets the availability_zone of this CreateSubnetRequest.


        :param availability_zone: The availability_zone of this CreateSubnetRequest.
        :type availability_zone: str
        """
        if availability_zone is None:
            raise ValueError("Invalid value for `availability_zone`, must not be `None`")  # noqa: E501

        self._availability_zone = availability_zone

    @property
    def region(self):
        """Gets the region of this CreateSubnetRequest.


        :return: The region of this CreateSubnetRequest.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this CreateSubnetRequest.


        :param region: The region of this CreateSubnetRequest.
        :type region: str
        """
        if region is None:
            raise ValueError("Invalid value for `region`, must not be `None`")  # noqa: E501

        self._region = region

    @property
    def gateway_ip(self):
        """Gets the gateway_ip of this CreateSubnetRequest.


        :return: The gateway_ip of this CreateSubnetRequest.
        :rtype: str
        """
        return self._gateway_ip

    @gateway_ip.setter
    def gateway_ip(self, gateway_ip):
        """Sets the gateway_ip of this CreateSubnetRequest.


        :param gateway_ip: The gateway_ip of this CreateSubnetRequest.
        :type gateway_ip: str
        """

        self._gateway_ip = gateway_ip

    @property
    def ip_version(self):
        """Gets the ip_version of this CreateSubnetRequest.


        :return: The ip_version of this CreateSubnetRequest.
        :rtype: str
        """
        return self._ip_version

    @ip_version.setter
    def ip_version(self, ip_version):
        """Sets the ip_version of this CreateSubnetRequest.


        :param ip_version: The ip_version of this CreateSubnetRequest.
        :type ip_version: str
        """
        allowed_values = ["IPv4", "IPv6"]  # noqa: E501
        if ip_version not in allowed_values:
            raise ValueError(
                "Invalid value for `ip_version` ({0}), must be one of {1}"
                .format(ip_version, allowed_values)
            )

        self._ip_version = ip_version

    @property
    def enable_dhcp(self):
        """Gets the enable_dhcp of this CreateSubnetRequest.


        :return: The enable_dhcp of this CreateSubnetRequest.
        :rtype: bool
        """
        return self._enable_dhcp

    @enable_dhcp.setter
    def enable_dhcp(self, enable_dhcp):
        """Sets the enable_dhcp of this CreateSubnetRequest.


        :param enable_dhcp: The enable_dhcp of this CreateSubnetRequest.
        :type enable_dhcp: bool
        """

        self._enable_dhcp = enable_dhcp

    @property
    def allocation_pools(self):
        """Gets the allocation_pools of this CreateSubnetRequest.


        :return: The allocation_pools of this CreateSubnetRequest.
        :rtype: object
        """
        return self._allocation_pools

    @allocation_pools.setter
    def allocation_pools(self, allocation_pools):
        """Sets the allocation_pools of this CreateSubnetRequest.


        :param allocation_pools: The allocation_pools of this CreateSubnetRequest.
        :type allocation_pools: object
        """

        self._allocation_pools = allocation_pools
