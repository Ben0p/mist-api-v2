# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mist_api_v2.models.base_model_ import Model
from mist_api_v2.models.add_cloud_request_features import AddCloudRequestFeatures
from mist_api_v2.models.cloud_credentials import CloudCredentials
from mist_api_v2 import util

from mist_api_v2.models.add_cloud_request_features import AddCloudRequestFeatures  # noqa: E501
from mist_api_v2.models.cloud_credentials import CloudCredentials  # noqa: E501

class AddCloudRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, title=None, provider=None, credentials=None, features=None):  # noqa: E501
        """AddCloudRequest - a model defined in OpenAPI

        :param title: The title of this AddCloudRequest.  # noqa: E501
        :type title: str
        :param provider: The provider of this AddCloudRequest.  # noqa: E501
        :type provider: str
        :param credentials: The credentials of this AddCloudRequest.  # noqa: E501
        :type credentials: CloudCredentials
        :param features: The features of this AddCloudRequest.  # noqa: E501
        :type features: AddCloudRequestFeatures
        """
        self.openapi_types = {
            'title': str,
            'provider': str,
            'credentials': CloudCredentials,
            'features': AddCloudRequestFeatures
        }

        self.attribute_map = {
            'title': 'title',
            'provider': 'provider',
            'credentials': 'credentials',
            'features': 'features'
        }

        self._title = title
        self._provider = provider
        self._credentials = credentials
        self._features = features

    @classmethod
    def from_dict(cls, dikt) -> 'AddCloudRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AddCloudRequest of this AddCloudRequest.  # noqa: E501
        :rtype: AddCloudRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def title(self):
        """Gets the title of this AddCloudRequest.

        The name of the cloud to add  # noqa: E501

        :return: The title of this AddCloudRequest.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this AddCloudRequest.

        The name of the cloud to add  # noqa: E501

        :param title: The title of this AddCloudRequest.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def provider(self):
        """Gets the provider of this AddCloudRequest.

        The provider of the cloud  # noqa: E501

        :return: The provider of this AddCloudRequest.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this AddCloudRequest.

        The provider of the cloud  # noqa: E501

        :param provider: The provider of this AddCloudRequest.
        :type provider: str
        """
        allowed_values = ["amazon", "google", "openstack"]  # noqa: E501
        if provider not in allowed_values:
            raise ValueError(
                "Invalid value for `provider` ({0}), must be one of {1}"
                .format(provider, allowed_values)
            )

        self._provider = provider

    @property
    def credentials(self):
        """Gets the credentials of this AddCloudRequest.


        :return: The credentials of this AddCloudRequest.
        :rtype: CloudCredentials
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials):
        """Sets the credentials of this AddCloudRequest.


        :param credentials: The credentials of this AddCloudRequest.
        :type credentials: CloudCredentials
        """
        if credentials is None:
            raise ValueError("Invalid value for `credentials`, must not be `None`")  # noqa: E501

        self._credentials = credentials

    @property
    def features(self):
        """Gets the features of this AddCloudRequest.


        :return: The features of this AddCloudRequest.
        :rtype: AddCloudRequestFeatures
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this AddCloudRequest.


        :param features: The features of this AddCloudRequest.
        :type features: AddCloudRequestFeatures
        """

        self._features = features
