# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mist_api_v2.models.base_model_ import Model
from mist_api_v2.models.resource_ids import ResourceIds
from mist_api_v2.models.tag_full import TagFull
from mist_api_v2.models.tag_name import TagName
from mist_api_v2 import util

from mist_api_v2.models.resource_ids import ResourceIds  # noqa: E501
from mist_api_v2.models.tag_full import TagFull  # noqa: E501
from mist_api_v2.models.tag_name import TagName  # noqa: E501

class Tag(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, key=None, value=None, tag=None, resources=None):  # noqa: E501
        """Tag - a model defined in OpenAPI

        :param key: The key of this Tag.  # noqa: E501
        :type key: str
        :param value: The value of this Tag.  # noqa: E501
        :type value: str
        :param tag: The tag of this Tag.  # noqa: E501
        :type tag: TagName
        :param resources: The resources of this Tag.  # noqa: E501
        :type resources: List[ResourceIds]
        """
        self.openapi_types = {
            'key': str,
            'value': str,
            'tag': TagName,
            'resources': List[ResourceIds]
        }

        self.attribute_map = {
            'key': 'key',
            'value': 'value',
            'tag': 'tag',
            'resources': 'resources'
        }

        self._key = key
        self._value = value
        self._tag = tag
        self._resources = resources

    @classmethod
    def from_dict(cls, dikt) -> 'Tag':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Tag of this Tag.  # noqa: E501
        :rtype: Tag
        """
        return util.deserialize_model(dikt, cls)

    @property
    def key(self):
        """Gets the key of this Tag.


        :return: The key of this Tag.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Tag.


        :param key: The key of this Tag.
        :type key: str
        """

        self._key = key

    @property
    def value(self):
        """Gets the value of this Tag.


        :return: The value of this Tag.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Tag.


        :param value: The value of this Tag.
        :type value: str
        """

        self._value = value

    @property
    def tag(self):
        """Gets the tag of this Tag.


        :return: The tag of this Tag.
        :rtype: TagName
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this Tag.


        :param tag: The tag of this Tag.
        :type tag: TagName
        """

        self._tag = tag

    @property
    def resources(self):
        """Gets the resources of this Tag.


        :return: The resources of this Tag.
        :rtype: List[ResourceIds]
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this Tag.


        :param resources: The resources of this Tag.
        :type resources: List[ResourceIds]
        """

        self._resources = resources
