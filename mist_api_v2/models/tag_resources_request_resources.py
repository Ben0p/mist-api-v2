# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mist_api_v2.models.base_model_ import Model
from mist_api_v2.models.resource_type import ResourceType
from mist_api_v2.models.tag_resources_request_tag import TagResourcesRequestTag
from mist_api_v2 import util

from mist_api_v2.models.resource_type import ResourceType  # noqa: E501
from mist_api_v2.models.tag_resources_request_tag import TagResourcesRequestTag  # noqa: E501

class TagResourcesRequestResources(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, resource_id=None, resource_type=None, tag=None):  # noqa: E501
        """TagResourcesRequestResources - a model defined in OpenAPI

        :param resource_id: The resource_id of this TagResourcesRequestResources.  # noqa: E501
        :type resource_id: str
        :param resource_type: The resource_type of this TagResourcesRequestResources.  # noqa: E501
        :type resource_type: ResourceType
        :param tag: The tag of this TagResourcesRequestResources.  # noqa: E501
        :type tag: List[TagResourcesRequestTag]
        """
        self.openapi_types = {
            'resource_id': str,
            'resource_type': ResourceType,
            'tag': List[TagResourcesRequestTag]
        }

        self.attribute_map = {
            'resource_id': 'resource_id',
            'resource_type': 'resource_type',
            'tag': 'tag'
        }

        self._resource_id = resource_id
        self._resource_type = resource_type
        self._tag = tag

    @classmethod
    def from_dict(cls, dikt) -> 'TagResourcesRequestResources':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TagResourcesRequest_resources of this TagResourcesRequestResources.  # noqa: E501
        :rtype: TagResourcesRequestResources
        """
        return util.deserialize_model(dikt, cls)

    @property
    def resource_id(self):
        """Gets the resource_id of this TagResourcesRequestResources.


        :return: The resource_id of this TagResourcesRequestResources.
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this TagResourcesRequestResources.


        :param resource_id: The resource_id of this TagResourcesRequestResources.
        :type resource_id: str
        """
        if resource_id is None:
            raise ValueError("Invalid value for `resource_id`, must not be `None`")  # noqa: E501

        self._resource_id = resource_id

    @property
    def resource_type(self):
        """Gets the resource_type of this TagResourcesRequestResources.


        :return: The resource_type of this TagResourcesRequestResources.
        :rtype: ResourceType
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this TagResourcesRequestResources.


        :param resource_type: The resource_type of this TagResourcesRequestResources.
        :type resource_type: ResourceType
        """
        if resource_type is None:
            raise ValueError("Invalid value for `resource_type`, must not be `None`")  # noqa: E501

        self._resource_type = resource_type

    @property
    def tag(self):
        """Gets the tag of this TagResourcesRequestResources.


        :return: The tag of this TagResourcesRequestResources.
        :rtype: List[TagResourcesRequestTag]
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this TagResourcesRequestResources.


        :param tag: The tag of this TagResourcesRequestResources.
        :type tag: List[TagResourcesRequestTag]
        """
        if tag is None:
            raise ValueError("Invalid value for `tag`, must not be `None`")  # noqa: E501

        self._tag = tag
