# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mist_api_v2.models.base_model_ import Model
from mist_api_v2.models.script_to_run_all_of import ScriptToRunAllOf
from mist_api_v2 import util

from mist_api_v2.models.script_to_run_all_of import ScriptToRunAllOf  # noqa: E501

class ScriptToRun(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type=None, inline=None, script_id=None):  # noqa: E501
        """ScriptToRun - a model defined in OpenAPI

        :param type: The type of this ScriptToRun.  # noqa: E501
        :type type: str
        :param inline: The inline of this ScriptToRun.  # noqa: E501
        :type inline: str
        :param script_id: The script_id of this ScriptToRun.  # noqa: E501
        :type script_id: str
        """
        self.openapi_types = {
            'type': str,
            'inline': str,
            'script_id': str
        }

        self.attribute_map = {
            'type': 'type',
            'inline': 'inline',
            'script_id': 'scriptId'
        }

        self._type = type
        self._inline = inline
        self._script_id = script_id

    @classmethod
    def from_dict(cls, dikt) -> 'ScriptToRun':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ScriptToRun of this ScriptToRun.  # noqa: E501
        :rtype: ScriptToRun
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this ScriptToRun.

        the script's type: inline, existing   # noqa: E501

        :return: The type of this ScriptToRun.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ScriptToRun.

        the script's type: inline, existing   # noqa: E501

        :param type: The type of this ScriptToRun.
        :type type: str
        """
        allowed_values = ["inline", "existing"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def inline(self):
        """Gets the inline of this ScriptToRun.


        :return: The inline of this ScriptToRun.
        :rtype: str
        """
        return self._inline

    @inline.setter
    def inline(self, inline):
        """Sets the inline of this ScriptToRun.


        :param inline: The inline of this ScriptToRun.
        :type inline: str
        """
        if inline is None:
            raise ValueError("Invalid value for `inline`, must not be `None`")  # noqa: E501

        self._inline = inline

    @property
    def script_id(self):
        """Gets the script_id of this ScriptToRun.

        the Id of the existing script to be executed   # noqa: E501

        :return: The script_id of this ScriptToRun.
        :rtype: str
        """
        return self._script_id

    @script_id.setter
    def script_id(self, script_id):
        """Sets the script_id of this ScriptToRun.

        the Id of the existing script to be executed   # noqa: E501

        :param script_id: The script_id of this ScriptToRun.
        :type script_id: str
        """
        if script_id is None:
            raise ValueError("Invalid value for `script_id`, must not be `None`")  # noqa: E501

        self._script_id = script_id
