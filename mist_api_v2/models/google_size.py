# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mist_api_v2.models.base_model_ import Model
from mist_api_v2.models.google_size_accelerators import GoogleSizeAccelerators
from mist_api_v2 import util

from mist_api_v2.models.google_size_accelerators import GoogleSizeAccelerators  # noqa: E501

class GoogleSize(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cpus=None, ram=None, size=None, accelerators=None):  # noqa: E501
        """GoogleSize - a model defined in OpenAPI

        :param cpus: The cpus of this GoogleSize.  # noqa: E501
        :type cpus: int
        :param ram: The ram of this GoogleSize.  # noqa: E501
        :type ram: int
        :param size: The size of this GoogleSize.  # noqa: E501
        :type size: str
        :param accelerators: The accelerators of this GoogleSize.  # noqa: E501
        :type accelerators: GoogleSizeAccelerators
        """
        self.openapi_types = {
            'cpus': int,
            'ram': int,
            'size': str,
            'accelerators': GoogleSizeAccelerators
        }

        self.attribute_map = {
            'cpus': 'cpus',
            'ram': 'ram',
            'size': 'size',
            'accelerators': 'accelerators'
        }

        self._cpus = cpus
        self._ram = ram
        self._size = size
        self._accelerators = accelerators

    @classmethod
    def from_dict(cls, dikt) -> 'GoogleSize':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The GoogleSize of this GoogleSize.  # noqa: E501
        :rtype: GoogleSize
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cpus(self):
        """Gets the cpus of this GoogleSize.

        Number of cpu cores. Mutually exclusive with 'size'  # noqa: E501

        :return: The cpus of this GoogleSize.
        :rtype: int
        """
        return self._cpus

    @cpus.setter
    def cpus(self, cpus):
        """Sets the cpus of this GoogleSize.

        Number of cpu cores. Mutually exclusive with 'size'  # noqa: E501

        :param cpus: The cpus of this GoogleSize.
        :type cpus: int
        """
        if cpus is not None and cpus < 1:  # noqa: E501
            raise ValueError("Invalid value for `cpus`, must be a value greater than or equal to `1`")  # noqa: E501

        self._cpus = cpus

    @property
    def ram(self):
        """Gets the ram of this GoogleSize.

        Ram size in MBs. Mutually exclusive with 'size'  # noqa: E501

        :return: The ram of this GoogleSize.
        :rtype: int
        """
        return self._ram

    @ram.setter
    def ram(self, ram):
        """Sets the ram of this GoogleSize.

        Ram size in MBs. Mutually exclusive with 'size'  # noqa: E501

        :param ram: The ram of this GoogleSize.
        :type ram: int
        """
        if ram is not None and ram < 256:  # noqa: E501
            raise ValueError("Invalid value for `ram`, must be a value greater than or equal to `256`")  # noqa: E501

        self._ram = ram

    @property
    def size(self):
        """Gets the size of this GoogleSize.

        Name or ID of the size to select for this machine. Mutually exclusive with 'cpus' and 'ram'  # noqa: E501

        :return: The size of this GoogleSize.
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this GoogleSize.

        Name or ID of the size to select for this machine. Mutually exclusive with 'cpus' and 'ram'  # noqa: E501

        :param size: The size of this GoogleSize.
        :type size: str
        """

        self._size = size

    @property
    def accelerators(self):
        """Gets the accelerators of this GoogleSize.


        :return: The accelerators of this GoogleSize.
        :rtype: GoogleSizeAccelerators
        """
        return self._accelerators

    @accelerators.setter
    def accelerators(self, accelerators):
        """Sets the accelerators of this GoogleSize.


        :param accelerators: The accelerators of this GoogleSize.
        :type accelerators: GoogleSizeAccelerators
        """

        self._accelerators = accelerators
