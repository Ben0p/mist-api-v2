# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mist_api_v2.models.base_model_ import Model
from mist_api_v2 import util


class GoogleClusterRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, provider=None, location=None):  # noqa: E501
        """GoogleClusterRequest - a model defined in OpenAPI

        :param provider: The provider of this GoogleClusterRequest.  # noqa: E501
        :type provider: str
        :param location: The location of this GoogleClusterRequest.  # noqa: E501
        :type location: str
        """
        self.openapi_types = {
            'provider': str,
            'location': str
        }

        self.attribute_map = {
            'provider': 'provider',
            'location': 'location'
        }

        self._provider = provider
        self._location = location

    @classmethod
    def from_dict(cls, dikt) -> 'GoogleClusterRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The GoogleClusterRequest of this GoogleClusterRequest.  # noqa: E501
        :rtype: GoogleClusterRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def provider(self):
        """Gets the provider of this GoogleClusterRequest.


        :return: The provider of this GoogleClusterRequest.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this GoogleClusterRequest.


        :param provider: The provider of this GoogleClusterRequest.
        :type provider: str
        """
        allowed_values = ["google"]  # noqa: E501
        if provider not in allowed_values:
            raise ValueError(
                "Invalid value for `provider` ({0}), must be one of {1}"
                .format(provider, allowed_values)
            )

        self._provider = provider

    @property
    def location(self):
        """Gets the location of this GoogleClusterRequest.

        The name of the location to create the cluster in  # noqa: E501

        :return: The location of this GoogleClusterRequest.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this GoogleClusterRequest.

        The name of the location to create the cluster in  # noqa: E501

        :param location: The location of this GoogleClusterRequest.
        :type location: str
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")  # noqa: E501

        self._location = location
