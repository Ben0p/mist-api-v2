# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mist_api_v2.models.base_model_ import Model
from mist_api_v2.models.any_of_resource_selector_field_selector_tagging_selector_age_selector import AnyOfResourceSelectorFieldSelectorTaggingSelectorAgeSelector
from mist_api_v2 import util

from mist_api_v2.models.any_of_resource_selector_field_selector_tagging_selector_age_selector import AnyOfResourceSelectorFieldSelectorTaggingSelectorAgeSelector  # noqa: E501

class EditScheduleRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, description=None, enabled=None, action=None, script_id=None, params=None, selectors=None, schedule_type=None, schedule_entry=None, start_after=None):  # noqa: E501
        """EditScheduleRequest - a model defined in OpenAPI

        :param name: The name of this EditScheduleRequest.  # noqa: E501
        :type name: str
        :param description: The description of this EditScheduleRequest.  # noqa: E501
        :type description: str
        :param enabled: The enabled of this EditScheduleRequest.  # noqa: E501
        :type enabled: bool
        :param action: The action of this EditScheduleRequest.  # noqa: E501
        :type action: str
        :param script_id: The script_id of this EditScheduleRequest.  # noqa: E501
        :type script_id: str
        :param params: The params of this EditScheduleRequest.  # noqa: E501
        :type params: str
        :param selectors: The selectors of this EditScheduleRequest.  # noqa: E501
        :type selectors: List[AnyOfResourceSelectorFieldSelectorTaggingSelectorAgeSelector]
        :param schedule_type: The schedule_type of this EditScheduleRequest.  # noqa: E501
        :type schedule_type: str
        :param schedule_entry: The schedule_entry of this EditScheduleRequest.  # noqa: E501
        :type schedule_entry: str
        :param start_after: The start_after of this EditScheduleRequest.  # noqa: E501
        :type start_after: str
        """
        self.openapi_types = {
            'name': str,
            'description': str,
            'enabled': bool,
            'action': str,
            'script_id': str,
            'params': str,
            'selectors': List[AnyOfResourceSelectorFieldSelectorTaggingSelectorAgeSelector],
            'schedule_type': str,
            'schedule_entry': str,
            'start_after': str
        }

        self.attribute_map = {
            'name': 'name',
            'description': 'description',
            'enabled': 'enabled',
            'action': 'action',
            'script_id': 'script_id',
            'params': 'params',
            'selectors': 'selectors',
            'schedule_type': 'schedule_type',
            'schedule_entry': 'schedule_entry',
            'start_after': 'start_after'
        }

        self._name = name
        self._description = description
        self._enabled = enabled
        self._action = action
        self._script_id = script_id
        self._params = params
        self._selectors = selectors
        self._schedule_type = schedule_type
        self._schedule_entry = schedule_entry
        self._start_after = start_after

    @classmethod
    def from_dict(cls, dikt) -> 'EditScheduleRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The EditScheduleRequest of this EditScheduleRequest.  # noqa: E501
        :rtype: EditScheduleRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this EditScheduleRequest.

        The name of the schedule that is about to be edited  # noqa: E501

        :return: The name of this EditScheduleRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EditScheduleRequest.

        The name of the schedule that is about to be edited  # noqa: E501

        :param name: The name of this EditScheduleRequest.
        :type name: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this EditScheduleRequest.

        The description of the schedule that is about to be edited  # noqa: E501

        :return: The description of this EditScheduleRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EditScheduleRequest.

        The description of the schedule that is about to be edited  # noqa: E501

        :param description: The description of this EditScheduleRequest.
        :type description: str
        """

        self._description = description

    @property
    def enabled(self):
        """Gets the enabled of this EditScheduleRequest.

        Schedule status (enabled, disabled)  # noqa: E501

        :return: The enabled of this EditScheduleRequest.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this EditScheduleRequest.

        Schedule status (enabled, disabled)  # noqa: E501

        :param enabled: The enabled of this EditScheduleRequest.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def action(self):
        """Gets the action of this EditScheduleRequest.

        Edit the action that a schedule performs on a resource  # noqa: E501

        :return: The action of this EditScheduleRequest.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this EditScheduleRequest.

        Edit the action that a schedule performs on a resource  # noqa: E501

        :param action: The action of this EditScheduleRequest.
        :type action: str
        """
        allowed_values = ["reboot", "destroy", "notify", "start", "stop", "delete"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def script_id(self):
        """Gets the script_id of this EditScheduleRequest.

        The id of the script that schedule is about to run  # noqa: E501

        :return: The script_id of this EditScheduleRequest.
        :rtype: str
        """
        return self._script_id

    @script_id.setter
    def script_id(self, script_id):
        """Sets the script_id of this EditScheduleRequest.

        The id of the script that schedule is about to run  # noqa: E501

        :param script_id: The script_id of this EditScheduleRequest.
        :type script_id: str
        """

        self._script_id = script_id

    @property
    def params(self):
        """Gets the params of this EditScheduleRequest.

        Edit schedule parameters  # noqa: E501

        :return: The params of this EditScheduleRequest.
        :rtype: str
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this EditScheduleRequest.

        Edit schedule parameters  # noqa: E501

        :param params: The params of this EditScheduleRequest.
        :type params: str
        """

        self._params = params

    @property
    def selectors(self):
        """Gets the selectors of this EditScheduleRequest.


        :return: The selectors of this EditScheduleRequest.
        :rtype: List[AnyOfResourceSelectorFieldSelectorTaggingSelectorAgeSelector]
        """
        return self._selectors

    @selectors.setter
    def selectors(self, selectors):
        """Sets the selectors of this EditScheduleRequest.


        :param selectors: The selectors of this EditScheduleRequest.
        :type selectors: List[AnyOfResourceSelectorFieldSelectorTaggingSelectorAgeSelector]
        """

        self._selectors = selectors

    @property
    def schedule_type(self):
        """Gets the schedule_type of this EditScheduleRequest.

        Edit the type of the schedule  # noqa: E501

        :return: The schedule_type of this EditScheduleRequest.
        :rtype: str
        """
        return self._schedule_type

    @schedule_type.setter
    def schedule_type(self, schedule_type):
        """Sets the schedule_type of this EditScheduleRequest.

        Edit the type of the schedule  # noqa: E501

        :param schedule_type: The schedule_type of this EditScheduleRequest.
        :type schedule_type: str
        """
        allowed_values = ["crontab", "interval", "one_off"]  # noqa: E501
        if schedule_type not in allowed_values:
            raise ValueError(
                "Invalid value for `schedule_type` ({0}), must be one of {1}"
                .format(schedule_type, allowed_values)
            )

        self._schedule_type = schedule_type

    @property
    def schedule_entry(self):
        """Gets the schedule_entry of this EditScheduleRequest.

        In case of One Off schedule type the date string that schedule runs (The format should be ΥΥΥΥ-ΜΜ-DD HH:MM:SS). In case of Interval and Crontab schedule types a JSON string with need time unit values. For Interval schedule type interval integer value and period string value needed. For Crontab schedule type minute, hour, day_of_week, day_of_month and month_of_year string values needed.  # noqa: E501

        :return: The schedule_entry of this EditScheduleRequest.
        :rtype: str
        """
        return self._schedule_entry

    @schedule_entry.setter
    def schedule_entry(self, schedule_entry):
        """Sets the schedule_entry of this EditScheduleRequest.

        In case of One Off schedule type the date string that schedule runs (The format should be ΥΥΥΥ-ΜΜ-DD HH:MM:SS). In case of Interval and Crontab schedule types a JSON string with need time unit values. For Interval schedule type interval integer value and period string value needed. For Crontab schedule type minute, hour, day_of_week, day_of_month and month_of_year string values needed.  # noqa: E501

        :param schedule_entry: The schedule_entry of this EditScheduleRequest.
        :type schedule_entry: str
        """

        self._schedule_entry = schedule_entry

    @property
    def start_after(self):
        """Gets the start_after of this EditScheduleRequest.

        Edit the date after that schedule starts. The format should be ΥΥΥΥ-ΜΜ-DD HH:MM:SS  # noqa: E501

        :return: The start_after of this EditScheduleRequest.
        :rtype: str
        """
        return self._start_after

    @start_after.setter
    def start_after(self, start_after):
        """Sets the start_after of this EditScheduleRequest.

        Edit the date after that schedule starts. The format should be ΥΥΥΥ-ΜΜ-DD HH:MM:SS  # noqa: E501

        :param start_after: The start_after of this EditScheduleRequest.
        :type start_after: str
        """

        self._start_after = start_after
