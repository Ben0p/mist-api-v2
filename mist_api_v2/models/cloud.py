# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mist_api_v2.models.base_model_ import Model
from mist_api_v2 import util


class Cloud(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, provider=None):  # noqa: E501
        """Cloud - a model defined in OpenAPI

        :param id: The id of this Cloud.  # noqa: E501
        :type id: str
        :param provider: The provider of this Cloud.  # noqa: E501
        :type provider: str
        """
        self.openapi_types = {
            'id': str,
            'provider': str
        }

        self.attribute_map = {
            'id': 'id',
            'provider': 'provider'
        }

        self._id = id
        self._provider = provider

    @classmethod
    def from_dict(cls, dikt) -> 'Cloud':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Cloud of this Cloud.  # noqa: E501
        :rtype: Cloud
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Cloud.


        :return: The id of this Cloud.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Cloud.


        :param id: The id of this Cloud.
        :type id: str
        """

        self._id = id

    @property
    def provider(self):
        """Gets the provider of this Cloud.


        :return: The provider of this Cloud.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this Cloud.


        :param provider: The provider of this Cloud.
        :type provider: str
        """
        allowed_values = ["amazon", "google", "digitalocean", "packet", "openstack", "vsphere"]  # noqa: E501
        if provider not in allowed_values:
            raise ValueError(
                "Invalid value for `provider` ({0}), must be one of {1}"
                .format(provider, allowed_values)
            )

        self._provider = provider
