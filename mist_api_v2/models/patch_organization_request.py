# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mist_api_v2.models.base_model_ import Model
from mist_api_v2 import util


class PatchOrganizationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, vault_address=None, vault_secrets_engine_path=None, vault_token=None, vault_role_id=None, vault_secret_id=None):  # noqa: E501
        """PatchOrganizationRequest - a model defined in OpenAPI

        :param name: The name of this PatchOrganizationRequest.  # noqa: E501
        :type name: str
        :param vault_address: The vault_address of this PatchOrganizationRequest.  # noqa: E501
        :type vault_address: str
        :param vault_secrets_engine_path: The vault_secrets_engine_path of this PatchOrganizationRequest.  # noqa: E501
        :type vault_secrets_engine_path: str
        :param vault_token: The vault_token of this PatchOrganizationRequest.  # noqa: E501
        :type vault_token: str
        :param vault_role_id: The vault_role_id of this PatchOrganizationRequest.  # noqa: E501
        :type vault_role_id: str
        :param vault_secret_id: The vault_secret_id of this PatchOrganizationRequest.  # noqa: E501
        :type vault_secret_id: str
        """
        self.openapi_types = {
            'name': str,
            'vault_address': str,
            'vault_secrets_engine_path': str,
            'vault_token': str,
            'vault_role_id': str,
            'vault_secret_id': str
        }

        self.attribute_map = {
            'name': 'name',
            'vault_address': 'vault_address',
            'vault_secrets_engine_path': 'vault_secrets_engine_path',
            'vault_token': 'vault_token',
            'vault_role_id': 'vault_role_id',
            'vault_secret_id': 'vault_secret_id'
        }

        self._name = name
        self._vault_address = vault_address
        self._vault_secrets_engine_path = vault_secrets_engine_path
        self._vault_token = vault_token
        self._vault_role_id = vault_role_id
        self._vault_secret_id = vault_secret_id

    @classmethod
    def from_dict(cls, dikt) -> 'PatchOrganizationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PatchOrganizationRequest of this PatchOrganizationRequest.  # noqa: E501
        :rtype: PatchOrganizationRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this PatchOrganizationRequest.

        The organization's name  # noqa: E501

        :return: The name of this PatchOrganizationRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PatchOrganizationRequest.

        The organization's name  # noqa: E501

        :param name: The name of this PatchOrganizationRequest.
        :type name: str
        """

        self._name = name

    @property
    def vault_address(self):
        """Gets the vault_address of this PatchOrganizationRequest.

        The Vault's url  # noqa: E501

        :return: The vault_address of this PatchOrganizationRequest.
        :rtype: str
        """
        return self._vault_address

    @vault_address.setter
    def vault_address(self, vault_address):
        """Sets the vault_address of this PatchOrganizationRequest.

        The Vault's url  # noqa: E501

        :param vault_address: The vault_address of this PatchOrganizationRequest.
        :type vault_address: str
        """

        self._vault_address = vault_address

    @property
    def vault_secrets_engine_path(self):
        """Gets the vault_secrets_engine_path of this PatchOrganizationRequest.

        Vault secrets engine path  # noqa: E501

        :return: The vault_secrets_engine_path of this PatchOrganizationRequest.
        :rtype: str
        """
        return self._vault_secrets_engine_path

    @vault_secrets_engine_path.setter
    def vault_secrets_engine_path(self, vault_secrets_engine_path):
        """Sets the vault_secrets_engine_path of this PatchOrganizationRequest.

        Vault secrets engine path  # noqa: E501

        :param vault_secrets_engine_path: The vault_secrets_engine_path of this PatchOrganizationRequest.
        :type vault_secrets_engine_path: str
        """

        self._vault_secrets_engine_path = vault_secrets_engine_path

    @property
    def vault_token(self):
        """Gets the vault_token of this PatchOrganizationRequest.

        The Vault token that will be used to authenticate against the new Vault. Either token or both role_id and secret_id must be specified  # noqa: E501

        :return: The vault_token of this PatchOrganizationRequest.
        :rtype: str
        """
        return self._vault_token

    @vault_token.setter
    def vault_token(self, vault_token):
        """Sets the vault_token of this PatchOrganizationRequest.

        The Vault token that will be used to authenticate against the new Vault. Either token or both role_id and secret_id must be specified  # noqa: E501

        :param vault_token: The vault_token of this PatchOrganizationRequest.
        :type vault_token: str
        """

        self._vault_token = vault_token

    @property
    def vault_role_id(self):
        """Gets the vault_role_id of this PatchOrganizationRequest.

        The Vault RoleID to use for approle authentication. Either token or both role_id and secret_id must be specified  # noqa: E501

        :return: The vault_role_id of this PatchOrganizationRequest.
        :rtype: str
        """
        return self._vault_role_id

    @vault_role_id.setter
    def vault_role_id(self, vault_role_id):
        """Sets the vault_role_id of this PatchOrganizationRequest.

        The Vault RoleID to use for approle authentication. Either token or both role_id and secret_id must be specified  # noqa: E501

        :param vault_role_id: The vault_role_id of this PatchOrganizationRequest.
        :type vault_role_id: str
        """

        self._vault_role_id = vault_role_id

    @property
    def vault_secret_id(self):
        """Gets the vault_secret_id of this PatchOrganizationRequest.

        The Vault SecretID to use for approle authentication. Either token or both role_id and secret_id must be specified  # noqa: E501

        :return: The vault_secret_id of this PatchOrganizationRequest.
        :rtype: str
        """
        return self._vault_secret_id

    @vault_secret_id.setter
    def vault_secret_id(self, vault_secret_id):
        """Sets the vault_secret_id of this PatchOrganizationRequest.

        The Vault SecretID to use for approle authentication. Either token or both role_id and secret_id must be specified  # noqa: E501

        :param vault_secret_id: The vault_secret_id of this PatchOrganizationRequest.
        :type vault_secret_id: str
        """

        self._vault_secret_id = vault_secret_id
