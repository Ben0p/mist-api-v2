# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mist_api_v2.models.base_model_ import Model
from mist_api_v2.models.amazon_credentials import AmazonCredentials
from mist_api_v2.models.digital_ocean_credentials import DigitalOceanCredentials
from mist_api_v2.models.google_credentials import GoogleCredentials
from mist_api_v2.models.open_stack_credentials import OpenStackCredentials
from mist_api_v2.models.packet_credentials import PacketCredentials
from mist_api_v2.models.v_sphere_credentials import VSphereCredentials
from mist_api_v2 import util

from mist_api_v2.models.amazon_credentials import AmazonCredentials  # noqa: E501
from mist_api_v2.models.digital_ocean_credentials import DigitalOceanCredentials  # noqa: E501
from mist_api_v2.models.google_credentials import GoogleCredentials  # noqa: E501
from mist_api_v2.models.open_stack_credentials import OpenStackCredentials  # noqa: E501
from mist_api_v2.models.packet_credentials import PacketCredentials  # noqa: E501
from mist_api_v2.models.v_sphere_credentials import VSphereCredentials  # noqa: E501

class CloudCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, apikey=None, apisecret=None, token=None, project_id=None, private_key=None, auth_url=None, user=None, password=None, tenant=None, domain=None, region=None, compute_endpoint=None, host=None, username=None, ca_cert_file=None):  # noqa: E501
        """CloudCredentials - a model defined in OpenAPI

        :param apikey: The apikey of this CloudCredentials.  # noqa: E501
        :type apikey: str
        :param apisecret: The apisecret of this CloudCredentials.  # noqa: E501
        :type apisecret: str
        :param token: The token of this CloudCredentials.  # noqa: E501
        :type token: str
        :param project_id: The project_id of this CloudCredentials.  # noqa: E501
        :type project_id: str
        :param private_key: The private_key of this CloudCredentials.  # noqa: E501
        :type private_key: str
        :param auth_url: The auth_url of this CloudCredentials.  # noqa: E501
        :type auth_url: str
        :param user: The user of this CloudCredentials.  # noqa: E501
        :type user: str
        :param password: The password of this CloudCredentials.  # noqa: E501
        :type password: str
        :param tenant: The tenant of this CloudCredentials.  # noqa: E501
        :type tenant: str
        :param domain: The domain of this CloudCredentials.  # noqa: E501
        :type domain: str
        :param region: The region of this CloudCredentials.  # noqa: E501
        :type region: str
        :param compute_endpoint: The compute_endpoint of this CloudCredentials.  # noqa: E501
        :type compute_endpoint: str
        :param host: The host of this CloudCredentials.  # noqa: E501
        :type host: str
        :param username: The username of this CloudCredentials.  # noqa: E501
        :type username: str
        :param ca_cert_file: The ca_cert_file of this CloudCredentials.  # noqa: E501
        :type ca_cert_file: str
        """
        self.openapi_types = {
            'apikey': str,
            'apisecret': str,
            'token': str,
            'project_id': str,
            'private_key': str,
            'auth_url': str,
            'user': str,
            'password': str,
            'tenant': str,
            'domain': str,
            'region': str,
            'compute_endpoint': str,
            'host': str,
            'username': str,
            'ca_cert_file': str
        }

        self.attribute_map = {
            'apikey': 'apikey',
            'apisecret': 'apisecret',
            'token': 'token',
            'project_id': 'projectId',
            'private_key': 'privateKey',
            'auth_url': 'authUrl',
            'user': 'user',
            'password': 'password',
            'tenant': 'tenant',
            'domain': 'domain',
            'region': 'region',
            'compute_endpoint': 'computeEndpoint',
            'host': 'host',
            'username': 'username',
            'ca_cert_file': 'ca_cert_file'
        }

        self._apikey = apikey
        self._apisecret = apisecret
        self._token = token
        self._project_id = project_id
        self._private_key = private_key
        self._auth_url = auth_url
        self._user = user
        self._password = password
        self._tenant = tenant
        self._domain = domain
        self._region = region
        self._compute_endpoint = compute_endpoint
        self._host = host
        self._username = username
        self._ca_cert_file = ca_cert_file

    @classmethod
    def from_dict(cls, dikt) -> 'CloudCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CloudCredentials of this CloudCredentials.  # noqa: E501
        :rtype: CloudCredentials
        """
        return util.deserialize_model(dikt, cls)

    @property
    def apikey(self):
        """Gets the apikey of this CloudCredentials.

        You Packet API key  # noqa: E501

        :return: The apikey of this CloudCredentials.
        :rtype: str
        """
        return self._apikey

    @apikey.setter
    def apikey(self, apikey):
        """Sets the apikey of this CloudCredentials.

        You Packet API key  # noqa: E501

        :param apikey: The apikey of this CloudCredentials.
        :type apikey: str
        """
        if apikey is None:
            raise ValueError("Invalid value for `apikey`, must not be `None`")  # noqa: E501

        self._apikey = apikey

    @property
    def apisecret(self):
        """Gets the apisecret of this CloudCredentials.

        Your AWS API secret  # noqa: E501

        :return: The apisecret of this CloudCredentials.
        :rtype: str
        """
        return self._apisecret

    @apisecret.setter
    def apisecret(self, apisecret):
        """Sets the apisecret of this CloudCredentials.

        Your AWS API secret  # noqa: E501

        :param apisecret: The apisecret of this CloudCredentials.
        :type apisecret: str
        """
        if apisecret is None:
            raise ValueError("Invalid value for `apisecret`, must not be `None`")  # noqa: E501

        self._apisecret = apisecret

    @property
    def token(self):
        """Gets the token of this CloudCredentials.

        You DigitalOcean API token  # noqa: E501

        :return: The token of this CloudCredentials.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this CloudCredentials.

        You DigitalOcean API token  # noqa: E501

        :param token: The token of this CloudCredentials.
        :type token: str
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")  # noqa: E501

        self._token = token

    @property
    def project_id(self):
        """Gets the project_id of this CloudCredentials.

        The Id of your GCP project  # noqa: E501

        :return: The project_id of this CloudCredentials.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this CloudCredentials.

        The Id of your GCP project  # noqa: E501

        :param project_id: The project_id of this CloudCredentials.
        :type project_id: str
        """
        if project_id is None:
            raise ValueError("Invalid value for `project_id`, must not be `None`")  # noqa: E501

        self._project_id = project_id

    @property
    def private_key(self):
        """Gets the private_key of this CloudCredentials.

        Your GCP private key  # noqa: E501

        :return: The private_key of this CloudCredentials.
        :rtype: str
        """
        return self._private_key

    @private_key.setter
    def private_key(self, private_key):
        """Sets the private_key of this CloudCredentials.

        Your GCP private key  # noqa: E501

        :param private_key: The private_key of this CloudCredentials.
        :type private_key: str
        """
        if private_key is None:
            raise ValueError("Invalid value for `private_key`, must not be `None`")  # noqa: E501

        self._private_key = private_key

    @property
    def auth_url(self):
        """Gets the auth_url of this CloudCredentials.


        :return: The auth_url of this CloudCredentials.
        :rtype: str
        """
        return self._auth_url

    @auth_url.setter
    def auth_url(self, auth_url):
        """Sets the auth_url of this CloudCredentials.


        :param auth_url: The auth_url of this CloudCredentials.
        :type auth_url: str
        """
        if auth_url is None:
            raise ValueError("Invalid value for `auth_url`, must not be `None`")  # noqa: E501

        self._auth_url = auth_url

    @property
    def user(self):
        """Gets the user of this CloudCredentials.


        :return: The user of this CloudCredentials.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this CloudCredentials.


        :param user: The user of this CloudCredentials.
        :type user: str
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")  # noqa: E501

        self._user = user

    @property
    def password(self):
        """Gets the password of this CloudCredentials.

        Your password  # noqa: E501

        :return: The password of this CloudCredentials.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this CloudCredentials.

        Your password  # noqa: E501

        :param password: The password of this CloudCredentials.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501

        self._password = password

    @property
    def tenant(self):
        """Gets the tenant of this CloudCredentials.


        :return: The tenant of this CloudCredentials.
        :rtype: str
        """
        return self._tenant

    @tenant.setter
    def tenant(self, tenant):
        """Sets the tenant of this CloudCredentials.


        :param tenant: The tenant of this CloudCredentials.
        :type tenant: str
        """

        self._tenant = tenant

    @property
    def domain(self):
        """Gets the domain of this CloudCredentials.


        :return: The domain of this CloudCredentials.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this CloudCredentials.


        :param domain: The domain of this CloudCredentials.
        :type domain: str
        """

        self._domain = domain

    @property
    def region(self):
        """Gets the region of this CloudCredentials.


        :return: The region of this CloudCredentials.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this CloudCredentials.


        :param region: The region of this CloudCredentials.
        :type region: str
        """

        self._region = region

    @property
    def compute_endpoint(self):
        """Gets the compute_endpoint of this CloudCredentials.


        :return: The compute_endpoint of this CloudCredentials.
        :rtype: str
        """
        return self._compute_endpoint

    @compute_endpoint.setter
    def compute_endpoint(self, compute_endpoint):
        """Sets the compute_endpoint of this CloudCredentials.


        :param compute_endpoint: The compute_endpoint of this CloudCredentials.
        :type compute_endpoint: str
        """

        self._compute_endpoint = compute_endpoint

    @property
    def host(self):
        """Gets the host of this CloudCredentials.

        Your vSphere/vCenter host  # noqa: E501

        :return: The host of this CloudCredentials.
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this CloudCredentials.

        Your vSphere/vCenter host  # noqa: E501

        :param host: The host of this CloudCredentials.
        :type host: str
        """
        if host is None:
            raise ValueError("Invalid value for `host`, must not be `None`")  # noqa: E501

        self._host = host

    @property
    def username(self):
        """Gets the username of this CloudCredentials.

        Your username  # noqa: E501

        :return: The username of this CloudCredentials.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this CloudCredentials.

        Your username  # noqa: E501

        :param username: The username of this CloudCredentials.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def ca_cert_file(self):
        """Gets the ca_cert_file of this CloudCredentials.

        CA certificate  # noqa: E501

        :return: The ca_cert_file of this CloudCredentials.
        :rtype: str
        """
        return self._ca_cert_file

    @ca_cert_file.setter
    def ca_cert_file(self, ca_cert_file):
        """Sets the ca_cert_file of this CloudCredentials.

        CA certificate  # noqa: E501

        :param ca_cert_file: The ca_cert_file of this CloudCredentials.
        :type ca_cert_file: str
        """

        self._ca_cert_file = ca_cert_file
